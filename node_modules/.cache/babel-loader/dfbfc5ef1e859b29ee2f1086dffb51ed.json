{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPoint = isPoint;\nexports.Point = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _util = require(\"./internal/util\");\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\n/**\r\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\r\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar Point = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} srid - The coordinate reference system identifier.\r\n   * @param {number} x - The `x` coordinate of the point.\r\n   * @param {number} y - The `y` coordinate of the point.\r\n   * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\r\n   */\n  function Point(srid, x, y, z) {\n    (0, _classCallCheck2[\"default\"])(this, Point);\n    /**\r\n     * The coordinate reference system identifier.\r\n     * @type {Integer|number}\r\n     */\n\n    this.srid = (0, _util.assertNumberOrInteger)(srid, 'SRID');\n    /**\r\n     * The `x` coordinate of the point.\r\n     * @type {number}\r\n     */\n\n    this.x = (0, _util.assertNumber)(x, 'X coordinate');\n    /**\r\n     * The `y` coordinate of the point.\r\n     * @type {number}\r\n     */\n\n    this.y = (0, _util.assertNumber)(y, 'Y coordinate');\n    /**\r\n     * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\r\n     * @type {number}\r\n     */\n\n    this.z = z === null || z === undefined ? z : (0, _util.assertNumber)(z, 'Z coordinate');\n    Object.freeze(this);\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  (0, _createClass2[\"default\"])(Point, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.z || this.z === 0 ? \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \", z=\").concat(formatAsFloat(this.z), \"}\") : \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \"}\");\n    }\n  }]);\n  return Point;\n}();\n\nexports.Point = Point;\n\nfunction formatAsFloat(number) {\n  return Number.isInteger(number) ? number + '.0' : number.toString();\n}\n\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n});\n/**\r\n * Test if given object is an instance of {@link Point} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\r\n */\n\nfunction isPoint(obj) {\n  return (obj && obj[POINT_IDENTIFIER_PROPERTY]) === true;\n}","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/spatial-types.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","isPoint","Point","_classCallCheck2","_createClass2","_util","POINT_IDENTIFIER_PROPERTY","srid","x","y","z","assertNumberOrInteger","assertNumber","undefined","freeze","key","toString","concat","formatAsFloat","number","Number","isInteger","prototype","enumerable","configurable","writable","obj"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.isPoint = isPoint;\r\nexports.Point = void 0;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\r\n\r\nvar _util = require(\"./internal/util\");\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\r\n/**\r\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\r\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\n\r\nvar Point =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} srid - The coordinate reference system identifier.\r\n   * @param {number} x - The `x` coordinate of the point.\r\n   * @param {number} y - The `y` coordinate of the point.\r\n   * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\r\n   */\r\n  function Point(srid, x, y, z) {\r\n    (0, _classCallCheck2[\"default\"])(this, Point);\r\n\r\n    /**\r\n     * The coordinate reference system identifier.\r\n     * @type {Integer|number}\r\n     */\r\n    this.srid = (0, _util.assertNumberOrInteger)(srid, 'SRID');\r\n    /**\r\n     * The `x` coordinate of the point.\r\n     * @type {number}\r\n     */\r\n\r\n    this.x = (0, _util.assertNumber)(x, 'X coordinate');\r\n    /**\r\n     * The `y` coordinate of the point.\r\n     * @type {number}\r\n     */\r\n\r\n    this.y = (0, _util.assertNumber)(y, 'Y coordinate');\r\n    /**\r\n     * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\r\n     * @type {number}\r\n     */\r\n\r\n    this.z = z === null || z === undefined ? z : (0, _util.assertNumber)(z, 'Z coordinate');\r\n    Object.freeze(this);\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(Point, [{\r\n    key: \"toString\",\r\n    value: function toString() {\r\n      return this.z || this.z === 0 ? \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \", z=\").concat(formatAsFloat(this.z), \"}\") : \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \"}\");\r\n    }\r\n  }]);\r\n  return Point;\r\n}();\r\n\r\nexports.Point = Point;\r\n\r\nfunction formatAsFloat(number) {\r\n  return Number.isInteger(number) ? number + '.0' : number.toString();\r\n}\r\n\r\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\r\n  value: true,\r\n  enumerable: false,\r\n  configurable: false,\r\n  writable: false\r\n});\r\n/**\r\n * Test if given object is an instance of {@link Point} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\r\n */\r\n\r\nfunction isPoint(obj) {\r\n  return (obj && obj[POINT_IDENTIFIER_PROPERTY]) === true;\r\n}"]},"metadata":{},"sourceType":"script"}