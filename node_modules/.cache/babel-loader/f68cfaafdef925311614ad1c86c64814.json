{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ConnectionProvider = /*#__PURE__*/function () {\n  function ConnectionProvider() {\n    (0, _classCallCheck2[\"default\"])(this, ConnectionProvider);\n  }\n\n  (0, _createClass2[\"default\"])(ConnectionProvider, [{\n    key: \"acquireConnection\",\n\n    /**\r\n     * This method acquires a connection against the specified database.\r\n     *\r\n     * Access mode and Bookmarks only applies to routing driver. Access mode only\r\n     * differentiates the target server for the connection, where WRITE selects a\r\n     * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\r\n     * is only passed to the routing discovery procedure, for the system database to\r\n     * synchronize on creation of databases and is never used in direct drivers.\r\n     *\r\n     * @param {object} param - object parameter\r\n     * @param {string} param.accessMode - the access mode for the to-be-acquired connection\r\n     * @param {string} param.database - the target database for the to-be-acquired connection\r\n     * @param {Bookmark} param.bookmarks - the bookmarks to send to routing discovery\r\n     */\n    value: function acquireConnection() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          accessMode = _ref.accessMode,\n          database = _ref.database,\n          bookmarks = _ref.bookmarks;\n\n      throw new Error('not implemented');\n    }\n    /**\r\n     * This method checks whether the backend database supports multi database functionality\r\n     * by checking protocol handshake result.\r\n     *\r\n     * @returns {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"supportsMultiDb\",\n    value: function supportsMultiDb() {\n      throw new Error('not implemented');\n    }\n    /**\r\n     * This method checks whether the backend database supports transaction config functionality\r\n     * by checking protocol handshake result.\r\n     *\r\n     * @returns {Promise<boolean>}\r\n     */\n\n  }, {\n    key: \"supportsTransactionConfig\",\n    value: function supportsTransactionConfig() {\n      throw new Error('not implemented');\n    }\n    /**\r\n     * Closes this connection provider along with its internals (connections, pools, etc.)\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw new Error('not implemented');\n    }\n  }]);\n  return ConnectionProvider;\n}();\n\nexports[\"default\"] = ConnectionProvider;","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/internal/connection-provider.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_bookmark","ConnectionProvider","key","acquireConnection","_ref","arguments","length","undefined","accessMode","database","bookmarks","Error","supportsMultiDb","supportsTransactionConfig","close"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,gBAAgB,GAAGN,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIM,aAAa,GAAGP,sBAAsB,CAACC,OAAO,CAAC,oCAAD,CAAR,CAA1C;;AAEA,IAAIO,SAAS,GAAGR,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIQ,kBAAkB,GACtB,aACA,YAAY;AACV,WAASA,kBAAT,GAA8B;AAC5B,KAAC,GAAGH,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCG,kBAAvC;AACD;;AAED,GAAC,GAAGF,aAAa,CAAC,SAAD,CAAjB,EAA8BE,kBAA9B,EAAkD,CAAC;AACjDC,IAAAA,GAAG,EAAE,mBAD4C;;AAGjD;;;;;;;;;;;;;;AAcAL,IAAAA,KAAK,EAAE,SAASM,iBAAT,GAA6B;AAClC,UAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,UACIG,UAAU,GAAGJ,IAAI,CAACI,UADtB;AAAA,UAEIC,QAAQ,GAAGL,IAAI,CAACK,QAFpB;AAAA,UAGIC,SAAS,GAAGN,IAAI,CAACM,SAHrB;;AAKA,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;AACD;;;;;;;AAzBiD,GAAD,EAgC/C;AACDT,IAAAA,GAAG,EAAE,iBADJ;AAEDL,IAAAA,KAAK,EAAE,SAASe,eAAT,GAA2B;AAChC,YAAM,IAAID,KAAJ,CAAU,iBAAV,CAAN;AACD;AACD;;;;;;;AALC,GAhC+C,EA4C/C;AACDT,IAAAA,GAAG,EAAE,2BADJ;AAEDL,IAAAA,KAAK,EAAE,SAASgB,yBAAT,GAAqC;AAC1C,YAAM,IAAIF,KAAJ,CAAU,iBAAV,CAAN;AACD;AACD;;;;;;AALC,GA5C+C,EAuD/C;AACDT,IAAAA,GAAG,EAAE,OADJ;AAEDL,IAAAA,KAAK,EAAE,SAASiB,KAAT,GAAiB;AACtB,YAAM,IAAIH,KAAJ,CAAU,iBAAV,CAAN;AACD;AAJA,GAvD+C,CAAlD;AA6DA,SAAOV,kBAAP;AACD,CAnED,EAFA;;AAuEAL,OAAO,CAAC,SAAD,CAAP,GAAqBK,kBAArB","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = void 0;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\r\n\r\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ConnectionProvider =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function ConnectionProvider() {\r\n    (0, _classCallCheck2[\"default\"])(this, ConnectionProvider);\r\n  }\r\n\r\n  (0, _createClass2[\"default\"])(ConnectionProvider, [{\r\n    key: \"acquireConnection\",\r\n\r\n    /**\r\n     * This method acquires a connection against the specified database.\r\n     *\r\n     * Access mode and Bookmarks only applies to routing driver. Access mode only\r\n     * differentiates the target server for the connection, where WRITE selects a\r\n     * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\r\n     * is only passed to the routing discovery procedure, for the system database to\r\n     * synchronize on creation of databases and is never used in direct drivers.\r\n     *\r\n     * @param {object} param - object parameter\r\n     * @param {string} param.accessMode - the access mode for the to-be-acquired connection\r\n     * @param {string} param.database - the target database for the to-be-acquired connection\r\n     * @param {Bookmark} param.bookmarks - the bookmarks to send to routing discovery\r\n     */\r\n    value: function acquireConnection() {\r\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n          accessMode = _ref.accessMode,\r\n          database = _ref.database,\r\n          bookmarks = _ref.bookmarks;\r\n\r\n      throw new Error('not implemented');\r\n    }\r\n    /**\r\n     * This method checks whether the backend database supports multi database functionality\r\n     * by checking protocol handshake result.\r\n     *\r\n     * @returns {Promise<boolean>}\r\n     */\r\n\r\n  }, {\r\n    key: \"supportsMultiDb\",\r\n    value: function supportsMultiDb() {\r\n      throw new Error('not implemented');\r\n    }\r\n    /**\r\n     * This method checks whether the backend database supports transaction config functionality\r\n     * by checking protocol handshake result.\r\n     *\r\n     * @returns {Promise<boolean>}\r\n     */\r\n\r\n  }, {\r\n    key: \"supportsTransactionConfig\",\r\n    value: function supportsTransactionConfig() {\r\n      throw new Error('not implemented');\r\n    }\r\n    /**\r\n     * Closes this connection provider along with its internals (connections, pools, etc.)\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n\r\n  }, {\r\n    key: \"close\",\r\n    value: function close() {\r\n      throw new Error('not implemented');\r\n    }\r\n  }]);\r\n  return ConnectionProvider;\r\n}();\r\n\r\nexports[\"default\"] = ConnectionProvider;"]},"metadata":{},"sourceType":"script"}