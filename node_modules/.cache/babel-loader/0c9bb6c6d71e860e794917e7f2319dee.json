{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a1ole\\\\Documents\\\\GitHub\\\\neo4jreact\\\\src\\\\InDir.js\";\nimport React, { Component } from \"react\";\nimport Selector2 from \"./Selector2\";\n\nclass InDir extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getValues = () => {\n      const session = this.driver.session({\n        defaultAccessMode: neo4j.session.READ\n      });\n      const values = [];\n      session.run('MATCH (d:Dir{Name: $nameinput})-[:value]->(v) RETURN v.Name', {\n        nameinput: this.props.name\n      }).subscribe({\n        onNext: record => {\n          values.push({\n            name: record._fields[0]\n          }); //console.log(record._fields[0])      \n        },\n        onCompleted: () => {\n          this.setState({\n            allValues: values\n          }); //console.log(this.state)\n\n          session.close(); // returns a Promise  \n        },\n        onError: error => {\n          console.log(error);\n        }\n      });\n    };\n\n    this.state = {\n      allValues: [],\n      choValues: []\n    };\n    this.driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'letmein'));\n    this.getValues();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, this.props.name, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"X\",\n      onClick: this.removeInDir,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Selector2, {\n      key: this.props.name,\n      prefix: 'Добавить значение',\n      name: this.props.name,\n      values: this.state.allValues,\n      change: this.addValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default InDir;","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/src/InDir.js"],"names":["React","Component","Selector2","InDir","constructor","props","getValues","session","driver","defaultAccessMode","neo4j","READ","values","run","nameinput","name","subscribe","onNext","record","push","_fields","onCompleted","setState","allValues","close","onError","error","console","log","state","choValues","auth","basic","render","removeInDir","addValue"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAE1BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAgBnBC,SAhBmB,GAgBP,MAAM;AACd,YAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYD,OAAZ,CAAoB;AAAEE,QAAAA,iBAAiB,EAAEC,KAAK,CAACH,OAAN,CAAcI;AAAnC,OAApB,CAAhB;AACA,YAAMC,MAAM,GAAG,EAAf;AACAL,MAAAA,OAAO,CACNM,GADD,CACK,6DADL,EACoE;AAClEC,QAAAA,SAAS,EAAE,KAAKT,KAAL,CAAWU;AAD4C,OADpE,EAICC,SAJD,CAIW;AACTC,QAAAA,MAAM,EAAEC,MAAM,IAAI;AAChBN,UAAAA,MAAM,CAACO,IAAP,CAAY;AAACJ,YAAAA,IAAI,EAACG,MAAM,CAACE,OAAP,CAAe,CAAf;AAAN,WAAZ,EADgB,CAEhB;AACD,SAJQ;AAKTC,QAAAA,WAAW,EAAE,MAAM;AACjB,eAAKC,QAAL,CAAc;AAAEC,YAAAA,SAAS,EAAEX;AAAb,WAAd,EADiB,CAEjB;;AACAL,UAAAA,OAAO,CAACiB,KAAR,GAHiB,CAGD;AACjB,SATQ;AAUTC,QAAAA,OAAO,EAAEC,KAAK,IAAI;AAChBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AAZQ,OAJX;AAkBD,KArCgB;;AAGf,SAAKG,KAAL,GAAa;AACXN,MAAAA,SAAS,EAAE,EADA;AAEXO,MAAAA,SAAS,EAAE;AAFA,KAAb;AAIA,SAAKtB,MAAL,GAAcE,KAAK,CAACF,MAAN,CACZ,uBADY,EAEZE,KAAK,CAACqB,IAAN,CAAWC,KAAX,CAAiB,OAAjB,EAA0B,SAA1B,CAFY,CAAd;AAKA,SAAK1B,SAAL;AAEH;;AAyBH2B,EAAAA,MAAM,GAAG;AACP,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAK5B,KAAL,CAAWU,IAAhB,eACA;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,GAA3B;AAA+B,MAAA,OAAO,EAAE,KAAKmB,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAE,KAAK7B,KAAL,CAAWU,IAA3B;AAAiC,MAAA,MAAM,EAAE,mBAAzC;AAA8D,MAAA,IAAI,EAAE,KAAKV,KAAL,CAAWU,IAA/E;AAAqF,MAAA,MAAM,EAAG,KAAKc,KAAL,CAAWN,SAAzG;AAAqH,MAAA,MAAM,EAAE,KAAKY,QAAlI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAJ,CAJA,CADJ;AAeD;;AAzD2B;;AA4D9B,eAAehC,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Selector2 from \"./Selector2\";\r\n\r\nclass InDir extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          allValues: [],          \r\n          choValues: [],          \r\n        };        \r\n        this.driver = neo4j.driver(\r\n          'bolt://localhost:7687',\r\n          neo4j.auth.basic('neo4j', 'letmein')\r\n        );\r\n        \r\n        this.getValues();\r\n        \r\n    };\r\n \r\n    getValues = () => {\r\n        const session = this.driver.session({ defaultAccessMode: neo4j.session.READ });\r\n        const values = [];\r\n        session\r\n        .run('MATCH (d:Dir{Name: $nameinput})-[:value]->(v) RETURN v.Name', {\r\n          nameinput: this.props.name\r\n        })\r\n        .subscribe({     \r\n          onNext: record => {\r\n            values.push({name:record._fields[0]});  \r\n            //console.log(record._fields[0])      \r\n          },\r\n          onCompleted: () => {          \r\n            this.setState({ allValues: values})\r\n            //console.log(this.state)\r\n            session.close();// returns a Promise  \r\n          },\r\n          onError: error => {\r\n            console.log(error)\r\n          }\r\n        });    \r\n      };\r\n\r\n  render() {    \r\n    return (\r\n        <tr>\r\n        <td>{this.props.name}\r\n        <input type=\"submit\" value=\"X\" onClick={this.removeInDir}></input>\r\n        </td>  \r\n        <td><Selector2 key={this.props.name} prefix={'Добавить значение'} name={this.props.name} values ={this.state.allValues}  change={this.addValue}/></td>  \r\n        \r\n          {/* {this.state.choDirs.get(item[0]).map(v => {               \r\n              return <td>{v}</td>\r\n              })} */}\r\n      </tr>\r\n\r\n    )\r\n        \r\n        \r\n  }\r\n}\r\n\r\nexport default InDir;"]},"metadata":{},"sourceType":"module"}