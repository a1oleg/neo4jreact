{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.driver = driver;\nObject.defineProperty(exports, \"int\", {\n  enumerable: true,\n  get: function get() {\n    return _integer[\"int\"];\n  }\n});\nObject.defineProperty(exports, \"isInt\", {\n  enumerable: true,\n  get: function get() {\n    return _integer.isInt;\n  }\n});\nObject.defineProperty(exports, \"Neo4jError\", {\n  enumerable: true,\n  get: function get() {\n    return _error.Neo4jError;\n  }\n});\nObject.defineProperty(exports, \"isPoint\", {\n  enumerable: true,\n  get: function get() {\n    return _spatialTypes.isPoint;\n  }\n});\nObject.defineProperty(exports, \"isDate\", {\n  enumerable: true,\n  get: function get() {\n    return _temporalTypes.isDate;\n  }\n});\nObject.defineProperty(exports, \"isDateTime\", {\n  enumerable: true,\n  get: function get() {\n    return _temporalTypes.isDateTime;\n  }\n});\nObject.defineProperty(exports, \"isDuration\", {\n  enumerable: true,\n  get: function get() {\n    return _temporalTypes.isDuration;\n  }\n});\nObject.defineProperty(exports, \"isLocalDateTime\", {\n  enumerable: true,\n  get: function get() {\n    return _temporalTypes.isLocalDateTime;\n  }\n});\nObject.defineProperty(exports, \"isLocalTime\", {\n  enumerable: true,\n  get: function get() {\n    return _temporalTypes.isLocalTime;\n  }\n});\nObject.defineProperty(exports, \"isTime\", {\n  enumerable: true,\n  get: function get() {\n    return _temporalTypes.isTime;\n  }\n});\nexports[\"default\"] = exports.temporal = exports.spatial = exports.error = exports.session = exports.types = exports.logging = exports.auth = exports.integer = void 0;\n\nvar _integer = _interopRequireWildcard(require(\"./integer\"));\n\nvar _graphTypes = require(\"./graph-types\");\n\nvar _error = require(\"./error\");\n\nvar _result = _interopRequireDefault(require(\"./result\"));\n\nvar _resultSummary = _interopRequireDefault(require(\"./result-summary\"));\n\nvar _record = _interopRequireDefault(require(\"./record\"));\n\nvar _driver = require(\"./driver\");\n\nvar _routingDriver = _interopRequireDefault(require(\"./routing-driver\"));\n\nvar _version = _interopRequireDefault(require(\"./version\"));\n\nvar _util = require(\"./internal/util\");\n\nvar _urlUtil = _interopRequireDefault(require(\"./internal/url-util\"));\n\nvar _spatialTypes = require(\"./spatial-types\");\n\nvar _temporalTypes = require(\"./temporal-types\");\n\nvar _serverAddress = _interopRequireDefault(require(\"./internal/server-address\"));\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Construct a new Neo4j Driver. This is your main entry point for this\r\n * library.\r\n *\r\n * ## Configuration\r\n *\r\n * This function optionally takes a configuration argument. Available configuration\r\n * options are as follows:\r\n *\r\n *     {\r\n *       // Encryption level: ENCRYPTION_ON or ENCRYPTION_OFF.\r\n *       encrypted: ENCRYPTION_ON|ENCRYPTION_OFF\r\n *\r\n *       // Trust strategy to use if encryption is enabled. There is no mode to disable\r\n *       // trust other than disabling encryption altogether. The reason for\r\n *       // this is that if you don't know who you are talking to, it is easy for an\r\n *       // attacker to hijack your encrypted connection, rendering encryption pointless.\r\n *       //\r\n *       // TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this\r\n *       // means that you trust whatever certificates are in the default trusted certificate\r\n *       // store of the underlying system. For Browser environments, the trusted certificate\r\n *       // store is usually managed by the browser. Refer to your system or browser documentation\r\n *       // if you want to explicitly add a certificate as trusted.\r\n *       //\r\n *       // TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -\r\n *       // whenever we establish an encrypted connection, we ensure the host is using\r\n *       // an encryption certificate that is in, or is signed by, a certificate given\r\n *       // as trusted through configuration. This option is only available for NodeJS environments.\r\n *       //\r\n *       // TRUST_ALL_CERTIFICATES means that you trust everything without any verifications\r\n *       // steps carried out.  This option is only available for NodeJS environments and should not\r\n *       // be used on production systems.\r\n *       trust: \"TRUST_SYSTEM_CA_SIGNED_CERTIFICATES\" | \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\" |\r\n *       \"TRUST_ALL_CERTIFICATES\",\r\n *\r\n *       // List of one or more paths to trusted encryption certificates. This only\r\n *       // works in the NodeJS bundle, and only matters if you use \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\".\r\n *       // The certificate files should be in regular X.509 PEM format.\r\n *       // For instance, ['./trusted.pem']\r\n *       trustedCertificates: [],\r\n *\r\n *       // The maximum total number of connections allowed to be managed by the connection pool, per host.\r\n *       // This includes both in-use and idle connections. No maximum connection pool size is imposed\r\n *       // by default.\r\n *       maxConnectionPoolSize: 100,\r\n *\r\n *       // The maximum allowed lifetime for a pooled connection in milliseconds. Pooled connections older than this\r\n *       // threshold will be closed and removed from the pool. Such discarding happens during connection acquisition\r\n *       // so that new session is never backed by an old connection. Setting this option to a low value will cause\r\n *       // a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime\r\n *       // to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,\r\n *       // etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero\r\n *       // and negative values result in lifetime not being checked.\r\n *       maxConnectionLifetime: 60 * 60 * 1000, // 1 hour\r\n *\r\n *       // The maximum amount of time to wait to acquire a connection from the pool (to either create a new\r\n *       // connection or borrow an existing one.\r\n *       connectionAcquisitionTimeout: 60000, // 1 minute\r\n *\r\n *       // Specify the maximum time in milliseconds transactions are allowed to retry via\r\n *       // `Session#readTransaction()` and `Session#writeTransaction()` functions.\r\n *       // These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient\r\n *       // errors with exponential backoff using initial delay of 1 second.\r\n *       // Default value is 30000 which is 30 seconds.\r\n *       maxTransactionRetryTime: 30000, // 30 seconds\r\n *\r\n *       // Specify socket connection timeout in milliseconds. Numeric values are expected. Negative and zero values\r\n *       // result in no timeout being applied. Connection establishment will be then bound by the timeout configured\r\n *       // on the operating system level. Default value is 30000, which is 30 seconds.\r\n *       connectionTimeout: 30000, // 30 seconds\r\n *\r\n *       // Make this driver always return native JavaScript numbers for integer values, instead of the\r\n *       // dedicated {@link Integer} class. Values that do not fit in native number bit range will be represented as\r\n *       // `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.\r\n *       // **Warning:** ResultSummary It is not always safe to enable this setting when JavaScript applications are not the only ones\r\n *       // interacting with the database. Stored numbers might in such case be not representable by native\r\n *       // {@link Number} type and thus driver will return lossy values. This might also happen when data was\r\n *       // initially imported using neo4j import tool and contained numbers larger than\r\n *       // `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.\r\n *       // Default value for this option is `false` because native JavaScript numbers might result\r\n *       // in loss of precision in the general case.\r\n *       disableLosslessIntegers: false,\r\n *\r\n *       // Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.\r\n *       //\r\n *       // Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and\r\n *       // its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all\r\n *       // levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.\r\n *       //\r\n *       // Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should\r\n *       // take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations\r\n *       // because it is often executed on a hot path.\r\n *       //\r\n *       // No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.\r\n *       logging: {\r\n *         level: 'info',\r\n *         logger: (level, message) => console.log(level + ' ' + message)\r\n *       },\r\n *\r\n *       // Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.\r\n *       // Such resolution happens:\r\n *       //  * during the very first rediscovery when driver is created\r\n *       //  * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address\r\n *       //\r\n *       // In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.\r\n *       // In browser environment driver uses the initial address as-is.\r\n *       // Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.\r\n *       // Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses\r\n *       // or array of addresses directly.\r\n *       resolver: function(address) {\r\n *         return ['127.0.0.1:8888', 'fallback.db.com:7687'];\r\n *       },\r\n *     }\r\n *\r\n * @param {string} url The URL for the Neo4j database, for instance \"neo4j://localhost\" and/or \"bolt://localhost\"\r\n * @param {Map<string,string>} authToken Authentication credentials. See {@link auth} for helpers.\r\n * @param {Object} config Configuration object. See the configuration section above for details.\r\n * @returns {Driver}\r\n */\n\n\nfunction driver(url, authToken) {\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0, _util.assertString)(url, 'Bolt URL');\n\n  var parsedUrl = _urlUtil[\"default\"].parseDatabaseUrl(url); // Determine entryption/trust options from the URL.\n\n\n  var routing = false;\n  var encrypted = false;\n  var trust;\n\n  switch (parsedUrl.scheme) {\n    case 'bolt':\n      break;\n\n    case 'bolt+s':\n      encrypted = true;\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\n      break;\n\n    case 'bolt+ssc':\n      encrypted = true;\n      trust = 'TRUST_ALL_CERTIFICATES';\n      break;\n\n    case 'neo4j':\n      routing = true;\n      break;\n\n    case 'neo4j+s':\n      encrypted = true;\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\n      routing = true;\n      break;\n\n    case 'neo4j+ssc':\n      encrypted = true;\n      trust = 'TRUST_ALL_CERTIFICATES';\n      routing = true;\n      break;\n\n    default:\n      throw new Error(\"Unknown scheme: \".concat(parsedUrl.scheme));\n  } // Encryption enabled on URL, propagate trust to the config.\n\n\n  if (encrypted) {\n    // Check for configuration conflict between URL and config.\n    if ('encrypted' in config || 'trust' in config) {\n      throw new Error('Encryption/trust can only be configured either through URL or config, not both');\n    }\n\n    config.encrypted = _util.ENCRYPTION_ON;\n    config.trust = trust;\n  }\n\n  if (routing) {\n    return new _routingDriver[\"default\"](_serverAddress[\"default\"].fromUrl(parsedUrl.hostAndPort), parsedUrl.query, USER_AGENT, authToken, config);\n  } else {\n    if (!(0, _util.isEmptyObjectOrNull)(parsedUrl.query)) {\n      throw new Error(\"Parameters are not supported with none routed scheme. Given URL: '\".concat(url, \"'\"));\n    }\n\n    return new _driver.Driver(_serverAddress[\"default\"].fromUrl(parsedUrl.hostAndPort), USER_AGENT, authToken, config);\n  }\n}\n/**\r\n * @property {function(username: string, password: string, realm: ?string)} basic the function to create a\r\n * basic authentication token.\r\n * @property {function(base64EncodedTicket: string)} kerberos the function to create a Kerberos authentication token.\r\n * Accepts a single string argument - base64 encoded Kerberos ticket.\r\n * @property {function(principal: string, credentials: string, realm: string, scheme: string, parameters: ?object)} custom\r\n * the function to create a custom authentication token.\r\n */\n\n\nvar auth = {\n  basic: function basic(username, password) {\n    var realm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n    if (realm) {\n      return {\n        scheme: 'basic',\n        principal: username,\n        credentials: password,\n        realm: realm\n      };\n    } else {\n      return {\n        scheme: 'basic',\n        principal: username,\n        credentials: password\n      };\n    }\n  },\n  kerberos: function kerberos(base64EncodedTicket) {\n    return {\n      scheme: 'kerberos',\n      principal: '',\n      // This empty string is required for backwards compatibility.\n      credentials: base64EncodedTicket\n    };\n  },\n  custom: function custom(principal, credentials, realm, scheme) {\n    var parameters = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n\n    if (parameters) {\n      return {\n        scheme: scheme,\n        principal: principal,\n        credentials: credentials,\n        realm: realm,\n        parameters: parameters\n      };\n    } else {\n      return {\n        scheme: scheme,\n        principal: principal,\n        credentials: credentials,\n        realm: realm\n      };\n    }\n  }\n};\nexports.auth = auth;\nvar USER_AGENT = 'neo4j-javascript/' + _version[\"default\"];\n/**\r\n * Object containing predefined logging configurations. These are expected to be used as values of the driver config's `logging` property.\r\n * @property {function(level: ?string): object} console the function to create a logging config that prints all messages to `console.log` with\r\n * timestamp, level and message. It takes an optional `level` parameter which represents the maximum log level to be logged. Default value is 'info'.\r\n */\n\nvar logging = {\n  console: function (_console) {\n    function console(_x) {\n      return _console.apply(this, arguments);\n    }\n\n    console.toString = function () {\n      return _console.toString();\n    };\n\n    return console;\n  }(function (level) {\n    return {\n      level: level,\n      logger: function logger(level, message) {\n        return console.log(\"\".concat(global.Date.now(), \" \").concat(level.toUpperCase(), \" \").concat(message));\n      }\n    };\n  })\n  /**\r\n   * Object containing constructors for all neo4j types.\r\n   */\n\n};\nexports.logging = logging;\nvar types = {\n  Node: _graphTypes.Node,\n  Relationship: _graphTypes.Relationship,\n  UnboundRelationship: _graphTypes.UnboundRelationship,\n  PathSegment: _graphTypes.PathSegment,\n  Path: _graphTypes.Path,\n  Result: _result[\"default\"],\n  ResultSummary: _resultSummary[\"default\"],\n  Record: _record[\"default\"],\n  Point: _spatialTypes.Point,\n  Date: _temporalTypes.Date,\n  DateTime: _temporalTypes.DateTime,\n  Duration: _temporalTypes.Duration,\n  LocalDateTime: _temporalTypes.LocalDateTime,\n  LocalTime: _temporalTypes.LocalTime,\n  Time: _temporalTypes.Time,\n  Integer: _integer[\"default\"]\n  /**\r\n   * Object containing string constants representing session access modes.\r\n   */\n\n};\nexports.types = types;\nvar session = {\n  READ: _driver.READ,\n  WRITE: _driver.WRITE\n  /**\r\n   * Object containing string constants representing predefined {@link Neo4jError} codes.\r\n   */\n\n};\nexports.session = session;\nvar error = {\n  SERVICE_UNAVAILABLE: _error.SERVICE_UNAVAILABLE,\n  SESSION_EXPIRED: _error.SESSION_EXPIRED,\n  PROTOCOL_ERROR: _error.PROTOCOL_ERROR\n  /**\r\n   * Object containing functions to work with {@link Integer} objects.\r\n   */\n\n};\nexports.error = error;\nvar integer = {\n  toNumber: _integer.toNumber,\n  toString: _integer.toString,\n  inSafeRange: _integer.inSafeRange\n  /**\r\n   * Object containing functions to work with spatial types, like {@link Point}.\r\n   */\n\n};\nexports.integer = integer;\nvar spatial = {\n  isPoint: _spatialTypes.isPoint\n  /**\r\n   * Object containing functions to work with temporal types, like {@link Time} or {@link Duration}.\r\n   */\n\n};\nexports.spatial = spatial;\nvar temporal = {\n  isDuration: _temporalTypes.isDuration,\n  isLocalTime: _temporalTypes.isLocalTime,\n  isTime: _temporalTypes.isTime,\n  isDate: _temporalTypes.isDate,\n  isLocalDateTime: _temporalTypes.isLocalDateTime,\n  isDateTime: _temporalTypes.isDateTime\n  /**\r\n   * @private\r\n   */\n\n};\nexports.temporal = temporal;\nvar forExport = {\n  driver: driver,\n  \"int\": _integer[\"int\"],\n  isInt: _integer.isInt,\n  isPoint: _spatialTypes.isPoint,\n  isDuration: _temporalTypes.isDuration,\n  isLocalTime: _temporalTypes.isLocalTime,\n  isTime: _temporalTypes.isTime,\n  isDate: _temporalTypes.isDate,\n  isLocalDateTime: _temporalTypes.isLocalDateTime,\n  isDateTime: _temporalTypes.isDateTime,\n  integer: integer,\n  Neo4jError: _error.Neo4jError,\n  auth: auth,\n  logging: logging,\n  types: types,\n  session: session,\n  error: error,\n  spatial: spatial,\n  temporal: temporal\n};\nvar _default = forExport;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/index.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","driver","enumerable","get","_integer","isInt","_error","Neo4jError","_spatialTypes","isPoint","_temporalTypes","isDate","isDateTime","isDuration","isLocalDateTime","isLocalTime","isTime","temporal","spatial","error","session","types","logging","auth","integer","_graphTypes","_result","_resultSummary","_record","_driver","_routingDriver","_version","_util","_urlUtil","_serverAddress","url","authToken","config","arguments","length","undefined","assertString","parsedUrl","parseDatabaseUrl","routing","encrypted","trust","scheme","Error","concat","ENCRYPTION_ON","fromUrl","hostAndPort","query","USER_AGENT","isEmptyObjectOrNull","Driver","basic","username","password","realm","principal","credentials","kerberos","base64EncodedTicket","custom","parameters","console","_console","_x","apply","toString","level","logger","message","log","global","Date","now","toUpperCase","Node","Relationship","UnboundRelationship","PathSegment","Path","Result","ResultSummary","Record","Point","DateTime","Duration","LocalDateTime","LocalTime","Time","Integer","READ","WRITE","SERVICE_UNAVAILABLE","SESSION_EXPIRED","PROTOCOL_ERROR","toNumber","inSafeRange","forExport","_default"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.driver = driver;\r\nObject.defineProperty(exports, \"int\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _integer[\"int\"];\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isInt\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _integer.isInt;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"Neo4jError\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _error.Neo4jError;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isPoint\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _spatialTypes.isPoint;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isDate\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _temporalTypes.isDate;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isDateTime\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _temporalTypes.isDateTime;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isDuration\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _temporalTypes.isDuration;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isLocalDateTime\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _temporalTypes.isLocalDateTime;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isLocalTime\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _temporalTypes.isLocalTime;\r\n  }\r\n});\r\nObject.defineProperty(exports, \"isTime\", {\r\n  enumerable: true,\r\n  get: function get() {\r\n    return _temporalTypes.isTime;\r\n  }\r\n});\r\nexports[\"default\"] = exports.temporal = exports.spatial = exports.error = exports.session = exports.types = exports.logging = exports.auth = exports.integer = void 0;\r\n\r\nvar _integer = _interopRequireWildcard(require(\"./integer\"));\r\n\r\nvar _graphTypes = require(\"./graph-types\");\r\n\r\nvar _error = require(\"./error\");\r\n\r\nvar _result = _interopRequireDefault(require(\"./result\"));\r\n\r\nvar _resultSummary = _interopRequireDefault(require(\"./result-summary\"));\r\n\r\nvar _record = _interopRequireDefault(require(\"./record\"));\r\n\r\nvar _driver = require(\"./driver\");\r\n\r\nvar _routingDriver = _interopRequireDefault(require(\"./routing-driver\"));\r\n\r\nvar _version = _interopRequireDefault(require(\"./version\"));\r\n\r\nvar _util = require(\"./internal/util\");\r\n\r\nvar _urlUtil = _interopRequireDefault(require(\"./internal/url-util\"));\r\n\r\nvar _spatialTypes = require(\"./spatial-types\");\r\n\r\nvar _temporalTypes = require(\"./temporal-types\");\r\n\r\nvar _serverAddress = _interopRequireDefault(require(\"./internal/server-address\"));\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Construct a new Neo4j Driver. This is your main entry point for this\r\n * library.\r\n *\r\n * ## Configuration\r\n *\r\n * This function optionally takes a configuration argument. Available configuration\r\n * options are as follows:\r\n *\r\n *     {\r\n *       // Encryption level: ENCRYPTION_ON or ENCRYPTION_OFF.\r\n *       encrypted: ENCRYPTION_ON|ENCRYPTION_OFF\r\n *\r\n *       // Trust strategy to use if encryption is enabled. There is no mode to disable\r\n *       // trust other than disabling encryption altogether. The reason for\r\n *       // this is that if you don't know who you are talking to, it is easy for an\r\n *       // attacker to hijack your encrypted connection, rendering encryption pointless.\r\n *       //\r\n *       // TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this\r\n *       // means that you trust whatever certificates are in the default trusted certificate\r\n *       // store of the underlying system. For Browser environments, the trusted certificate\r\n *       // store is usually managed by the browser. Refer to your system or browser documentation\r\n *       // if you want to explicitly add a certificate as trusted.\r\n *       //\r\n *       // TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -\r\n *       // whenever we establish an encrypted connection, we ensure the host is using\r\n *       // an encryption certificate that is in, or is signed by, a certificate given\r\n *       // as trusted through configuration. This option is only available for NodeJS environments.\r\n *       //\r\n *       // TRUST_ALL_CERTIFICATES means that you trust everything without any verifications\r\n *       // steps carried out.  This option is only available for NodeJS environments and should not\r\n *       // be used on production systems.\r\n *       trust: \"TRUST_SYSTEM_CA_SIGNED_CERTIFICATES\" | \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\" |\r\n *       \"TRUST_ALL_CERTIFICATES\",\r\n *\r\n *       // List of one or more paths to trusted encryption certificates. This only\r\n *       // works in the NodeJS bundle, and only matters if you use \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\".\r\n *       // The certificate files should be in regular X.509 PEM format.\r\n *       // For instance, ['./trusted.pem']\r\n *       trustedCertificates: [],\r\n *\r\n *       // The maximum total number of connections allowed to be managed by the connection pool, per host.\r\n *       // This includes both in-use and idle connections. No maximum connection pool size is imposed\r\n *       // by default.\r\n *       maxConnectionPoolSize: 100,\r\n *\r\n *       // The maximum allowed lifetime for a pooled connection in milliseconds. Pooled connections older than this\r\n *       // threshold will be closed and removed from the pool. Such discarding happens during connection acquisition\r\n *       // so that new session is never backed by an old connection. Setting this option to a low value will cause\r\n *       // a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime\r\n *       // to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,\r\n *       // etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero\r\n *       // and negative values result in lifetime not being checked.\r\n *       maxConnectionLifetime: 60 * 60 * 1000, // 1 hour\r\n *\r\n *       // The maximum amount of time to wait to acquire a connection from the pool (to either create a new\r\n *       // connection or borrow an existing one.\r\n *       connectionAcquisitionTimeout: 60000, // 1 minute\r\n *\r\n *       // Specify the maximum time in milliseconds transactions are allowed to retry via\r\n *       // `Session#readTransaction()` and `Session#writeTransaction()` functions.\r\n *       // These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient\r\n *       // errors with exponential backoff using initial delay of 1 second.\r\n *       // Default value is 30000 which is 30 seconds.\r\n *       maxTransactionRetryTime: 30000, // 30 seconds\r\n *\r\n *       // Specify socket connection timeout in milliseconds. Numeric values are expected. Negative and zero values\r\n *       // result in no timeout being applied. Connection establishment will be then bound by the timeout configured\r\n *       // on the operating system level. Default value is 30000, which is 30 seconds.\r\n *       connectionTimeout: 30000, // 30 seconds\r\n *\r\n *       // Make this driver always return native JavaScript numbers for integer values, instead of the\r\n *       // dedicated {@link Integer} class. Values that do not fit in native number bit range will be represented as\r\n *       // `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.\r\n *       // **Warning:** ResultSummary It is not always safe to enable this setting when JavaScript applications are not the only ones\r\n *       // interacting with the database. Stored numbers might in such case be not representable by native\r\n *       // {@link Number} type and thus driver will return lossy values. This might also happen when data was\r\n *       // initially imported using neo4j import tool and contained numbers larger than\r\n *       // `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.\r\n *       // Default value for this option is `false` because native JavaScript numbers might result\r\n *       // in loss of precision in the general case.\r\n *       disableLosslessIntegers: false,\r\n *\r\n *       // Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.\r\n *       //\r\n *       // Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and\r\n *       // its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all\r\n *       // levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.\r\n *       //\r\n *       // Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should\r\n *       // take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations\r\n *       // because it is often executed on a hot path.\r\n *       //\r\n *       // No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.\r\n *       logging: {\r\n *         level: 'info',\r\n *         logger: (level, message) => console.log(level + ' ' + message)\r\n *       },\r\n *\r\n *       // Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.\r\n *       // Such resolution happens:\r\n *       //  * during the very first rediscovery when driver is created\r\n *       //  * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address\r\n *       //\r\n *       // In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.\r\n *       // In browser environment driver uses the initial address as-is.\r\n *       // Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.\r\n *       // Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses\r\n *       // or array of addresses directly.\r\n *       resolver: function(address) {\r\n *         return ['127.0.0.1:8888', 'fallback.db.com:7687'];\r\n *       },\r\n *     }\r\n *\r\n * @param {string} url The URL for the Neo4j database, for instance \"neo4j://localhost\" and/or \"bolt://localhost\"\r\n * @param {Map<string,string>} authToken Authentication credentials. See {@link auth} for helpers.\r\n * @param {Object} config Configuration object. See the configuration section above for details.\r\n * @returns {Driver}\r\n */\r\nfunction driver(url, authToken) {\r\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n  (0, _util.assertString)(url, 'Bolt URL');\r\n\r\n  var parsedUrl = _urlUtil[\"default\"].parseDatabaseUrl(url); // Determine entryption/trust options from the URL.\r\n\r\n\r\n  var routing = false;\r\n  var encrypted = false;\r\n  var trust;\r\n\r\n  switch (parsedUrl.scheme) {\r\n    case 'bolt':\r\n      break;\r\n\r\n    case 'bolt+s':\r\n      encrypted = true;\r\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\r\n      break;\r\n\r\n    case 'bolt+ssc':\r\n      encrypted = true;\r\n      trust = 'TRUST_ALL_CERTIFICATES';\r\n      break;\r\n\r\n    case 'neo4j':\r\n      routing = true;\r\n      break;\r\n\r\n    case 'neo4j+s':\r\n      encrypted = true;\r\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\r\n      routing = true;\r\n      break;\r\n\r\n    case 'neo4j+ssc':\r\n      encrypted = true;\r\n      trust = 'TRUST_ALL_CERTIFICATES';\r\n      routing = true;\r\n      break;\r\n\r\n    default:\r\n      throw new Error(\"Unknown scheme: \".concat(parsedUrl.scheme));\r\n  } // Encryption enabled on URL, propagate trust to the config.\r\n\r\n\r\n  if (encrypted) {\r\n    // Check for configuration conflict between URL and config.\r\n    if ('encrypted' in config || 'trust' in config) {\r\n      throw new Error('Encryption/trust can only be configured either through URL or config, not both');\r\n    }\r\n\r\n    config.encrypted = _util.ENCRYPTION_ON;\r\n    config.trust = trust;\r\n  }\r\n\r\n  if (routing) {\r\n    return new _routingDriver[\"default\"](_serverAddress[\"default\"].fromUrl(parsedUrl.hostAndPort), parsedUrl.query, USER_AGENT, authToken, config);\r\n  } else {\r\n    if (!(0, _util.isEmptyObjectOrNull)(parsedUrl.query)) {\r\n      throw new Error(\"Parameters are not supported with none routed scheme. Given URL: '\".concat(url, \"'\"));\r\n    }\r\n\r\n    return new _driver.Driver(_serverAddress[\"default\"].fromUrl(parsedUrl.hostAndPort), USER_AGENT, authToken, config);\r\n  }\r\n}\r\n/**\r\n * @property {function(username: string, password: string, realm: ?string)} basic the function to create a\r\n * basic authentication token.\r\n * @property {function(base64EncodedTicket: string)} kerberos the function to create a Kerberos authentication token.\r\n * Accepts a single string argument - base64 encoded Kerberos ticket.\r\n * @property {function(principal: string, credentials: string, realm: string, scheme: string, parameters: ?object)} custom\r\n * the function to create a custom authentication token.\r\n */\r\n\r\n\r\nvar auth = {\r\n  basic: function basic(username, password) {\r\n    var realm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\r\n\r\n    if (realm) {\r\n      return {\r\n        scheme: 'basic',\r\n        principal: username,\r\n        credentials: password,\r\n        realm: realm\r\n      };\r\n    } else {\r\n      return {\r\n        scheme: 'basic',\r\n        principal: username,\r\n        credentials: password\r\n      };\r\n    }\r\n  },\r\n  kerberos: function kerberos(base64EncodedTicket) {\r\n    return {\r\n      scheme: 'kerberos',\r\n      principal: '',\r\n      // This empty string is required for backwards compatibility.\r\n      credentials: base64EncodedTicket\r\n    };\r\n  },\r\n  custom: function custom(principal, credentials, realm, scheme) {\r\n    var parameters = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\r\n\r\n    if (parameters) {\r\n      return {\r\n        scheme: scheme,\r\n        principal: principal,\r\n        credentials: credentials,\r\n        realm: realm,\r\n        parameters: parameters\r\n      };\r\n    } else {\r\n      return {\r\n        scheme: scheme,\r\n        principal: principal,\r\n        credentials: credentials,\r\n        realm: realm\r\n      };\r\n    }\r\n  }\r\n};\r\nexports.auth = auth;\r\nvar USER_AGENT = 'neo4j-javascript/' + _version[\"default\"];\r\n/**\r\n * Object containing predefined logging configurations. These are expected to be used as values of the driver config's `logging` property.\r\n * @property {function(level: ?string): object} console the function to create a logging config that prints all messages to `console.log` with\r\n * timestamp, level and message. It takes an optional `level` parameter which represents the maximum log level to be logged. Default value is 'info'.\r\n */\r\n\r\nvar logging = {\r\n  console: function (_console) {\r\n    function console(_x) {\r\n      return _console.apply(this, arguments);\r\n    }\r\n\r\n    console.toString = function () {\r\n      return _console.toString();\r\n    };\r\n\r\n    return console;\r\n  }(function (level) {\r\n    return {\r\n      level: level,\r\n      logger: function logger(level, message) {\r\n        return console.log(\"\".concat(global.Date.now(), \" \").concat(level.toUpperCase(), \" \").concat(message));\r\n      }\r\n    };\r\n  })\r\n  /**\r\n   * Object containing constructors for all neo4j types.\r\n   */\r\n\r\n};\r\nexports.logging = logging;\r\nvar types = {\r\n  Node: _graphTypes.Node,\r\n  Relationship: _graphTypes.Relationship,\r\n  UnboundRelationship: _graphTypes.UnboundRelationship,\r\n  PathSegment: _graphTypes.PathSegment,\r\n  Path: _graphTypes.Path,\r\n  Result: _result[\"default\"],\r\n  ResultSummary: _resultSummary[\"default\"],\r\n  Record: _record[\"default\"],\r\n  Point: _spatialTypes.Point,\r\n  Date: _temporalTypes.Date,\r\n  DateTime: _temporalTypes.DateTime,\r\n  Duration: _temporalTypes.Duration,\r\n  LocalDateTime: _temporalTypes.LocalDateTime,\r\n  LocalTime: _temporalTypes.LocalTime,\r\n  Time: _temporalTypes.Time,\r\n  Integer: _integer[\"default\"]\r\n  /**\r\n   * Object containing string constants representing session access modes.\r\n   */\r\n\r\n};\r\nexports.types = types;\r\nvar session = {\r\n  READ: _driver.READ,\r\n  WRITE: _driver.WRITE\r\n  /**\r\n   * Object containing string constants representing predefined {@link Neo4jError} codes.\r\n   */\r\n\r\n};\r\nexports.session = session;\r\nvar error = {\r\n  SERVICE_UNAVAILABLE: _error.SERVICE_UNAVAILABLE,\r\n  SESSION_EXPIRED: _error.SESSION_EXPIRED,\r\n  PROTOCOL_ERROR: _error.PROTOCOL_ERROR\r\n  /**\r\n   * Object containing functions to work with {@link Integer} objects.\r\n   */\r\n\r\n};\r\nexports.error = error;\r\nvar integer = {\r\n  toNumber: _integer.toNumber,\r\n  toString: _integer.toString,\r\n  inSafeRange: _integer.inSafeRange\r\n  /**\r\n   * Object containing functions to work with spatial types, like {@link Point}.\r\n   */\r\n\r\n};\r\nexports.integer = integer;\r\nvar spatial = {\r\n  isPoint: _spatialTypes.isPoint\r\n  /**\r\n   * Object containing functions to work with temporal types, like {@link Time} or {@link Duration}.\r\n   */\r\n\r\n};\r\nexports.spatial = spatial;\r\nvar temporal = {\r\n  isDuration: _temporalTypes.isDuration,\r\n  isLocalTime: _temporalTypes.isLocalTime,\r\n  isTime: _temporalTypes.isTime,\r\n  isDate: _temporalTypes.isDate,\r\n  isLocalDateTime: _temporalTypes.isLocalDateTime,\r\n  isDateTime: _temporalTypes.isDateTime\r\n  /**\r\n   * @private\r\n   */\r\n\r\n};\r\nexports.temporal = temporal;\r\nvar forExport = {\r\n  driver: driver,\r\n  \"int\": _integer[\"int\"],\r\n  isInt: _integer.isInt,\r\n  isPoint: _spatialTypes.isPoint,\r\n  isDuration: _temporalTypes.isDuration,\r\n  isLocalTime: _temporalTypes.isLocalTime,\r\n  isTime: _temporalTypes.isTime,\r\n  isDate: _temporalTypes.isDate,\r\n  isLocalDateTime: _temporalTypes.isLocalDateTime,\r\n  isDateTime: _temporalTypes.isDateTime,\r\n  integer: integer,\r\n  Neo4jError: _error.Neo4jError,\r\n  auth: auth,\r\n  logging: logging,\r\n  types: types,\r\n  session: session,\r\n  error: error,\r\n  spatial: spatial,\r\n  temporal: temporal\r\n};\r\nvar _default = forExport;\r\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}