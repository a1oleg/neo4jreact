{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a1ole\\\\Documents\\\\GitHub\\\\neo4jreact\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport RequestHead from \"./RequestHead\";\n\nvar neo4j = require('neo4j-driver');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAllDirs = () => {\n      const res = this.xfetch('MATCH (x:Dir) RETURN x');\n      this.setState(({\n        allDirs\n      }) => {\n        const newArr = [...allDirs, res.map(x => x.properties.description)];\n        return {\n          allDirs: newArr\n        };\n      });\n      const session = this.driver.session({\n        defaultAccessMode: neo4j.session.READ\n      }); //const res = [];\n\n      session.run('MATCH (x:Dir) RETURN x').subscribe({\n        //onKeys: keys => {\n        //console.log(keys)\n        //},\n        onNext: record => {\n          //console.log(this.state.allDirs);\n          res.push(record.get('x'));\n        },\n        onCompleted: () => {\n          session.close(); // returns a Promise\n\n          console.log(res.map(x => x.properties.description)); // this.setState(({ allDirs }) => {\n          //   const newArr = [...allDirs, res.map(x => x.properties.description)];\n          //   return {\n          //     allDirs: newArr\n          //   };\n          // });\n        },\n        onError: error => {\n          console.log(error);\n        }\n      });\n    };\n\n    this.xfetch = (query, params) => {\n      const session = this.driver.session({\n        defaultAccessMode: neo4j.session.READ\n      });\n      const res = [];\n      session.run(query, params).subscribe({\n        //onKeys: keys => {\n        //console.log(keys)\n        //},\n        onNext: record => {\n          //console.log(this.state.allDirs);\n          res.push(record.get('x'));\n        },\n        onCompleted: () => {\n          session.close(); // returns a Promise\n\n          this.setState(({\n            allDirs\n          }) => {\n            const newArr = [...allDirs, res.map(x => x.properties.description)];\n            return {\n              allDirs: newArr\n            };\n          });\n        },\n        onError: error => {\n          console.log(error);\n        }\n      });\n    };\n\n    this.state = {\n      allDirs: ['blabla'],\n      actDirs: [],\n      results: []\n    };\n    this.driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'letmein'));\n    this.fetchAllDirs();\n  }\n\n  // addDir = input => {\n  //   this.setState(({ actDirs }) => {\n  //     const newArr = [...actDirs, input];\n  //     return {\n  //       actDirs: newArr\n  //     };\n  //   });\n  // };\n  render() {\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, this.state.allDirs.map(n => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, n);\n    }), /*#__PURE__*/React.createElement(RequestHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/src/App.js"],"names":["React","Component","RequestHead","neo4j","require","App","constructor","props","fetchAllDirs","res","xfetch","setState","allDirs","newArr","map","x","properties","description","session","driver","defaultAccessMode","READ","run","subscribe","onNext","record","push","get","onCompleted","close","console","log","onError","error","query","params","state","actDirs","results","auth","basic","render","n"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport RequestHead from \"./RequestHead\";\r\n\r\nvar neo4j = require('neo4j-driver')\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      allDirs: ['blabla'],\r\n      actDirs: [],\r\n      results: [],\r\n\r\n    };\r\n    \r\n    this.driver = neo4j.driver(\r\n      'bolt://localhost:7687',\r\n      neo4j.auth.basic('neo4j', 'letmein')\r\n    )\r\n    \r\n    this.fetchAllDirs();  \r\n\r\n  }\r\n\r\n  fetchAllDirs = () => {\r\n    const res = this.xfetch('MATCH (x:Dir) RETURN x');\r\n    this.setState(({ allDirs }) => {\r\n          const newArr = [...allDirs, res.map(x => x.properties.description)];\r\n    \r\n          return {\r\n            allDirs: newArr\r\n          };\r\n        });\r\n    \r\n    const session = this.driver.session({ defaultAccessMode: neo4j.session.READ });\r\n    //const res = [];\r\n    session\r\n    .run('MATCH (x:Dir) RETURN x')\r\n    .subscribe({\r\n      //onKeys: keys => {\r\n        //console.log(keys)\r\n      //},\r\n      onNext: record => {\r\n        //console.log(this.state.allDirs);\r\n        res.push(record.get('x'));        \r\n      },\r\n      onCompleted: () => {        \r\n        session.close();// returns a Promise\r\n        console.log(res.map(x => x.properties.description));\r\n        \r\n        // this.setState(({ allDirs }) => {\r\n        //   const newArr = [...allDirs, res.map(x => x.properties.description)];\r\n    \r\n        //   return {\r\n        //     allDirs: newArr\r\n        //   };\r\n        // });\r\n\r\n      },\r\n      onError: error => {\r\n        console.log(error)\r\n      }\r\n    });          \r\n      \r\n  }\r\n\r\n\r\n  xfetch = (query, params) => {\r\n    const session = this.driver.session({ defaultAccessMode: neo4j.session.READ });\r\n    const res = [];\r\n    session\r\n    .run(query, params)\r\n    .subscribe({\r\n      //onKeys: keys => {\r\n        //console.log(keys)\r\n      //},\r\n      onNext: record => {\r\n        //console.log(this.state.allDirs);\r\n        res.push(record.get('x'));        \r\n      },\r\n      onCompleted: () => {        \r\n        session.close();// returns a Promise\r\n        this.setState(({ allDirs }) => {\r\n          const newArr = [...allDirs, res.map(x => x.properties.description)];\r\n    \r\n          return {\r\n            allDirs: newArr\r\n          };\r\n        });\r\n      },\r\n      onError: error => {\r\n        console.log(error)\r\n      }\r\n    });    \r\n  }\r\n  \r\n  // addDir = input => {\r\n  //   this.setState(({ actDirs }) => {\r\n  //     const newArr = [...actDirs, input];\r\n\r\n  //     return {\r\n  //       actDirs: newArr\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  render() {      \r\n      return (      \r\n      <main> \r\n        {this.state.allDirs.map(n => {\r\n         return <div>{n}</div>;\r\n       })}       \r\n        <RequestHead  /> \r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}