{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.ALL = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _constants = require(\"./constants\");\n\nvar _integer = require(\"../integer\");\n\nvar _util = require(\"./util\");\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\n\n\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\n\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\n\nvar RESET = 0x0f; // 0000 1111 // RESET\n\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\n\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\n\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\n\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\n\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\n\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\n\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\n\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\n\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\n\nvar PULL = 0x3f; // 0011 1111 // PULL\n\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\n\nvar NO_STATEMENT_ID = -1;\nvar ALL = -1;\nexports.ALL = ALL;\n\nvar RequestMessage = /*#__PURE__*/function () {\n  function RequestMessage(signature, fields, toString) {\n    (0, _classCallCheck2[\"default\"])(this, RequestMessage);\n    this.signature = signature;\n    this.fields = fields;\n    this.toString = toString;\n  }\n  /**\r\n   * Create a new INIT message.\r\n   * @param {string} clientName the client name.\r\n   * @param {Object} authToken the authentication token.\r\n   * @return {RequestMessage} new INIT message.\r\n   */\n\n\n  (0, _createClass2[\"default\"])(RequestMessage, null, [{\n    key: \"init\",\n    value: function init(clientName, authToken) {\n      return new RequestMessage(INIT, [clientName, authToken], function () {\n        return \"INIT \".concat(clientName, \" {...}\");\n      });\n    }\n    /**\r\n     * Create a new RUN message.\r\n     * @param {string} query the cypher query.\r\n     * @param {Object} parameters the query parameters.\r\n     * @return {RequestMessage} new RUN message.\r\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(query, parameters) {\n      return new RequestMessage(RUN, [query, parameters], function () {\n        return \"RUN \".concat(query, \" \").concat(JSON.stringify(parameters));\n      });\n    }\n    /**\r\n     * Get a PULL_ALL message.\r\n     * @return {RequestMessage} the PULL_ALL message.\r\n     */\n\n  }, {\n    key: \"pullAll\",\n    value: function pullAll() {\n      return PULL_ALL_MESSAGE;\n    }\n    /**\r\n     * Get a RESET message.\r\n     * @return {RequestMessage} the RESET message.\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      return RESET_MESSAGE;\n    }\n    /**\r\n     * Create a new HELLO message.\r\n     * @param {string} userAgent the user agent.\r\n     * @param {Object} authToken the authentication token.\r\n     * @return {RequestMessage} new HELLO message.\r\n     */\n\n  }, {\n    key: \"hello\",\n    value: function hello(userAgent, authToken) {\n      var metadata = Object.assign({\n        user_agent: userAgent\n      }, authToken);\n      return new RequestMessage(HELLO, [metadata], function () {\n        return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\");\n      });\n    }\n    /**\r\n     * Create a new BEGIN message.\r\n     * @param {Bookmark} bookmark the bookmark.\r\n     * @param {TxConfig} txConfig the configuration.\r\n     * @param {string} database the database name.\r\n     * @param {string} mode the access mode.\r\n     * @return {RequestMessage} new BEGIN message.\r\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          bookmark = _ref.bookmark,\n          txConfig = _ref.txConfig,\n          database = _ref.database,\n          mode = _ref.mode;\n\n      var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\n      return new RequestMessage(BEGIN, [metadata], function () {\n        return \"BEGIN \".concat(JSON.stringify(metadata));\n      });\n    }\n    /**\r\n     * Get a COMMIT message.\r\n     * @return {RequestMessage} the COMMIT message.\r\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return COMMIT_MESSAGE;\n    }\n    /**\r\n     * Get a ROLLBACK message.\r\n     * @return {RequestMessage} the ROLLBACK message.\r\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      return ROLLBACK_MESSAGE;\n    }\n    /**\r\n     * Create a new RUN message with additional metadata.\r\n     * @param {string} query the cypher query.\r\n     * @param {Object} parameters the query parameters.\r\n     * @param {Bookmark} bookmark the bookmark.\r\n     * @param {TxConfig} txConfig the configuration.\r\n     * @param {string} database the database name.\r\n     * @param {string} mode the access mode.\r\n     * @return {RequestMessage} new RUN message with additional metadata.\r\n     */\n\n  }, {\n    key: \"runWithMetadata\",\n    value: function runWithMetadata(query, parameters) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          bookmark = _ref2.bookmark,\n          txConfig = _ref2.txConfig,\n          database = _ref2.database,\n          mode = _ref2.mode;\n\n      var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\n      return new RequestMessage(RUN, [query, parameters, metadata], function () {\n        return \"RUN \".concat(query, \" \").concat(JSON.stringify(parameters), \" \").concat(JSON.stringify(metadata));\n      });\n    }\n    /**\r\n     * Get a GOODBYE message.\r\n     * @return {RequestMessage} the GOODBYE message.\r\n     */\n\n  }, {\n    key: \"goodbye\",\n    value: function goodbye() {\n      return GOODBYE_MESSAGE;\n    }\n    /**\r\n     * Generates a new PULL message with additional metadata.\r\n     * @param {Integer|number} stmtId\r\n     * @param {Integer|number} n\r\n     * @return {RequestMessage} the PULL message.\r\n     */\n\n  }, {\n    key: \"pull\",\n    value: function pull() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$stmtId = _ref3.stmtId,\n          stmtId = _ref3$stmtId === void 0 ? NO_STATEMENT_ID : _ref3$stmtId,\n          _ref3$n = _ref3.n,\n          n = _ref3$n === void 0 ? ALL : _ref3$n;\n\n      var metadata = buildStreamMetadata(stmtId || NO_STATEMENT_ID, n || ALL);\n      return new RequestMessage(PULL, [metadata], function () {\n        return \"PULL \".concat(JSON.stringify(metadata));\n      });\n    }\n    /**\r\n     * Generates a new DISCARD message with additional metadata.\r\n     * @param {Integer|number} stmtId\r\n     * @param {Integer|number} n\r\n     * @return {RequestMessage} the PULL message.\r\n     */\n\n  }, {\n    key: \"discard\",\n    value: function discard() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$stmtId = _ref4.stmtId,\n          stmtId = _ref4$stmtId === void 0 ? NO_STATEMENT_ID : _ref4$stmtId,\n          _ref4$n = _ref4.n,\n          n = _ref4$n === void 0 ? ALL : _ref4$n;\n\n      var metadata = buildStreamMetadata(stmtId || NO_STATEMENT_ID, n || ALL);\n      return new RequestMessage(DISCARD, [metadata], function () {\n        return \"DISCARD \".concat(JSON.stringify(metadata));\n      });\n    }\n  }]);\n  return RequestMessage;\n}();\n/**\r\n * Create an object that represent transaction metadata.\r\n * @param {Bookmark} bookmark the bookmark.\r\n * @param {TxConfig} txConfig the configuration.\r\n * @param {string} database the database name.\r\n * @param {string} mode the access mode.\r\n * @return {Object} a metadata object.\r\n */\n\n\nexports[\"default\"] = RequestMessage;\n\nfunction buildTxMetadata(bookmark, txConfig, database, mode) {\n  var metadata = {};\n\n  if (!bookmark.isEmpty()) {\n    metadata.bookmarks = bookmark.values();\n  }\n\n  if (txConfig.timeout) {\n    metadata.tx_timeout = txConfig.timeout;\n  }\n\n  if (txConfig.metadata) {\n    metadata.tx_metadata = txConfig.metadata;\n  }\n\n  if (database) {\n    metadata.db = (0, _util.assertString)(database, 'database');\n  }\n\n  if (mode === _constants.ACCESS_MODE_READ) {\n    metadata.mode = READ_MODE;\n  }\n\n  return metadata;\n}\n/**\r\n * Create an object that represents streaming metadata.\r\n * @param {Integer|number} stmtId The query id to stream its results.\r\n * @param {Integer|number} n The number of records to stream.\r\n * @returns {Object} a metadata object.\r\n */\n\n\nfunction buildStreamMetadata(stmtId, n) {\n  var metadata = {\n    n: (0, _integer[\"int\"])(n)\n  };\n\n  if (stmtId !== NO_STATEMENT_ID) {\n    metadata.qid = (0, _integer[\"int\"])(stmtId);\n  }\n\n  return metadata;\n} // constants for messages that never change\n\n\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {\n  return 'PULL_ALL';\n});\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () {\n  return 'RESET';\n});\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {\n  return 'COMMIT';\n});\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {\n  return 'ROLLBACK';\n});\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {\n  return 'GOODBYE';\n});","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/internal/request-message.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","ALL","_classCallCheck2","_createClass2","_constants","_integer","_util","INIT","ACK_FAILURE","RESET","RUN","DISCARD_ALL","PULL_ALL","HELLO","GOODBYE","BEGIN","COMMIT","ROLLBACK","DISCARD","PULL","READ_MODE","NO_STATEMENT_ID","RequestMessage","signature","fields","toString","key","init","clientName","authToken","concat","run","query","parameters","JSON","stringify","pullAll","PULL_ALL_MESSAGE","reset","RESET_MESSAGE","hello","userAgent","metadata","assign","user_agent","begin","_ref","arguments","length","undefined","bookmark","txConfig","database","mode","buildTxMetadata","commit","COMMIT_MESSAGE","rollback","ROLLBACK_MESSAGE","runWithMetadata","_ref2","goodbye","GOODBYE_MESSAGE","pull","_ref3","_ref3$stmtId","stmtId","_ref3$n","n","buildStreamMetadata","discard","_ref4","_ref4$stmtId","_ref4$n","isEmpty","bookmarks","values","timeout","tx_timeout","tx_metadata","db","assertString","ACCESS_MODE_READ","qid"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = exports.ALL = void 0;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\r\n\r\nvar _constants = require(\"./constants\");\r\n\r\nvar _integer = require(\"../integer\");\r\n\r\nvar _util = require(\"./util\");\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* eslint-disable no-unused-vars */\r\n// Signature bytes for each request message type\r\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\r\n\r\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\r\n\r\nvar RESET = 0x0f; // 0000 1111 // RESET\r\n\r\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\r\n\r\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\r\n\r\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\r\n\r\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\r\n\r\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\r\n\r\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\r\n\r\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\r\n\r\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\r\n\r\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\r\n\r\nvar PULL = 0x3f; // 0011 1111 // PULL\r\n\r\nvar READ_MODE = 'r';\r\n/* eslint-enable no-unused-vars */\r\n\r\nvar NO_STATEMENT_ID = -1;\r\nvar ALL = -1;\r\nexports.ALL = ALL;\r\n\r\nvar RequestMessage =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function RequestMessage(signature, fields, toString) {\r\n    (0, _classCallCheck2[\"default\"])(this, RequestMessage);\r\n    this.signature = signature;\r\n    this.fields = fields;\r\n    this.toString = toString;\r\n  }\r\n  /**\r\n   * Create a new INIT message.\r\n   * @param {string} clientName the client name.\r\n   * @param {Object} authToken the authentication token.\r\n   * @return {RequestMessage} new INIT message.\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(RequestMessage, null, [{\r\n    key: \"init\",\r\n    value: function init(clientName, authToken) {\r\n      return new RequestMessage(INIT, [clientName, authToken], function () {\r\n        return \"INIT \".concat(clientName, \" {...}\");\r\n      });\r\n    }\r\n    /**\r\n     * Create a new RUN message.\r\n     * @param {string} query the cypher query.\r\n     * @param {Object} parameters the query parameters.\r\n     * @return {RequestMessage} new RUN message.\r\n     */\r\n\r\n  }, {\r\n    key: \"run\",\r\n    value: function run(query, parameters) {\r\n      return new RequestMessage(RUN, [query, parameters], function () {\r\n        return \"RUN \".concat(query, \" \").concat(JSON.stringify(parameters));\r\n      });\r\n    }\r\n    /**\r\n     * Get a PULL_ALL message.\r\n     * @return {RequestMessage} the PULL_ALL message.\r\n     */\r\n\r\n  }, {\r\n    key: \"pullAll\",\r\n    value: function pullAll() {\r\n      return PULL_ALL_MESSAGE;\r\n    }\r\n    /**\r\n     * Get a RESET message.\r\n     * @return {RequestMessage} the RESET message.\r\n     */\r\n\r\n  }, {\r\n    key: \"reset\",\r\n    value: function reset() {\r\n      return RESET_MESSAGE;\r\n    }\r\n    /**\r\n     * Create a new HELLO message.\r\n     * @param {string} userAgent the user agent.\r\n     * @param {Object} authToken the authentication token.\r\n     * @return {RequestMessage} new HELLO message.\r\n     */\r\n\r\n  }, {\r\n    key: \"hello\",\r\n    value: function hello(userAgent, authToken) {\r\n      var metadata = Object.assign({\r\n        user_agent: userAgent\r\n      }, authToken);\r\n      return new RequestMessage(HELLO, [metadata], function () {\r\n        return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\");\r\n      });\r\n    }\r\n    /**\r\n     * Create a new BEGIN message.\r\n     * @param {Bookmark} bookmark the bookmark.\r\n     * @param {TxConfig} txConfig the configuration.\r\n     * @param {string} database the database name.\r\n     * @param {string} mode the access mode.\r\n     * @return {RequestMessage} new BEGIN message.\r\n     */\r\n\r\n  }, {\r\n    key: \"begin\",\r\n    value: function begin() {\r\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n          bookmark = _ref.bookmark,\r\n          txConfig = _ref.txConfig,\r\n          database = _ref.database,\r\n          mode = _ref.mode;\r\n\r\n      var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\r\n      return new RequestMessage(BEGIN, [metadata], function () {\r\n        return \"BEGIN \".concat(JSON.stringify(metadata));\r\n      });\r\n    }\r\n    /**\r\n     * Get a COMMIT message.\r\n     * @return {RequestMessage} the COMMIT message.\r\n     */\r\n\r\n  }, {\r\n    key: \"commit\",\r\n    value: function commit() {\r\n      return COMMIT_MESSAGE;\r\n    }\r\n    /**\r\n     * Get a ROLLBACK message.\r\n     * @return {RequestMessage} the ROLLBACK message.\r\n     */\r\n\r\n  }, {\r\n    key: \"rollback\",\r\n    value: function rollback() {\r\n      return ROLLBACK_MESSAGE;\r\n    }\r\n    /**\r\n     * Create a new RUN message with additional metadata.\r\n     * @param {string} query the cypher query.\r\n     * @param {Object} parameters the query parameters.\r\n     * @param {Bookmark} bookmark the bookmark.\r\n     * @param {TxConfig} txConfig the configuration.\r\n     * @param {string} database the database name.\r\n     * @param {string} mode the access mode.\r\n     * @return {RequestMessage} new RUN message with additional metadata.\r\n     */\r\n\r\n  }, {\r\n    key: \"runWithMetadata\",\r\n    value: function runWithMetadata(query, parameters) {\r\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\r\n          bookmark = _ref2.bookmark,\r\n          txConfig = _ref2.txConfig,\r\n          database = _ref2.database,\r\n          mode = _ref2.mode;\r\n\r\n      var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\r\n      return new RequestMessage(RUN, [query, parameters, metadata], function () {\r\n        return \"RUN \".concat(query, \" \").concat(JSON.stringify(parameters), \" \").concat(JSON.stringify(metadata));\r\n      });\r\n    }\r\n    /**\r\n     * Get a GOODBYE message.\r\n     * @return {RequestMessage} the GOODBYE message.\r\n     */\r\n\r\n  }, {\r\n    key: \"goodbye\",\r\n    value: function goodbye() {\r\n      return GOODBYE_MESSAGE;\r\n    }\r\n    /**\r\n     * Generates a new PULL message with additional metadata.\r\n     * @param {Integer|number} stmtId\r\n     * @param {Integer|number} n\r\n     * @return {RequestMessage} the PULL message.\r\n     */\r\n\r\n  }, {\r\n    key: \"pull\",\r\n    value: function pull() {\r\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n          _ref3$stmtId = _ref3.stmtId,\r\n          stmtId = _ref3$stmtId === void 0 ? NO_STATEMENT_ID : _ref3$stmtId,\r\n          _ref3$n = _ref3.n,\r\n          n = _ref3$n === void 0 ? ALL : _ref3$n;\r\n\r\n      var metadata = buildStreamMetadata(stmtId || NO_STATEMENT_ID, n || ALL);\r\n      return new RequestMessage(PULL, [metadata], function () {\r\n        return \"PULL \".concat(JSON.stringify(metadata));\r\n      });\r\n    }\r\n    /**\r\n     * Generates a new DISCARD message with additional metadata.\r\n     * @param {Integer|number} stmtId\r\n     * @param {Integer|number} n\r\n     * @return {RequestMessage} the PULL message.\r\n     */\r\n\r\n  }, {\r\n    key: \"discard\",\r\n    value: function discard() {\r\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n          _ref4$stmtId = _ref4.stmtId,\r\n          stmtId = _ref4$stmtId === void 0 ? NO_STATEMENT_ID : _ref4$stmtId,\r\n          _ref4$n = _ref4.n,\r\n          n = _ref4$n === void 0 ? ALL : _ref4$n;\r\n\r\n      var metadata = buildStreamMetadata(stmtId || NO_STATEMENT_ID, n || ALL);\r\n      return new RequestMessage(DISCARD, [metadata], function () {\r\n        return \"DISCARD \".concat(JSON.stringify(metadata));\r\n      });\r\n    }\r\n  }]);\r\n  return RequestMessage;\r\n}();\r\n/**\r\n * Create an object that represent transaction metadata.\r\n * @param {Bookmark} bookmark the bookmark.\r\n * @param {TxConfig} txConfig the configuration.\r\n * @param {string} database the database name.\r\n * @param {string} mode the access mode.\r\n * @return {Object} a metadata object.\r\n */\r\n\r\n\r\nexports[\"default\"] = RequestMessage;\r\n\r\nfunction buildTxMetadata(bookmark, txConfig, database, mode) {\r\n  var metadata = {};\r\n\r\n  if (!bookmark.isEmpty()) {\r\n    metadata.bookmarks = bookmark.values();\r\n  }\r\n\r\n  if (txConfig.timeout) {\r\n    metadata.tx_timeout = txConfig.timeout;\r\n  }\r\n\r\n  if (txConfig.metadata) {\r\n    metadata.tx_metadata = txConfig.metadata;\r\n  }\r\n\r\n  if (database) {\r\n    metadata.db = (0, _util.assertString)(database, 'database');\r\n  }\r\n\r\n  if (mode === _constants.ACCESS_MODE_READ) {\r\n    metadata.mode = READ_MODE;\r\n  }\r\n\r\n  return metadata;\r\n}\r\n/**\r\n * Create an object that represents streaming metadata.\r\n * @param {Integer|number} stmtId The query id to stream its results.\r\n * @param {Integer|number} n The number of records to stream.\r\n * @returns {Object} a metadata object.\r\n */\r\n\r\n\r\nfunction buildStreamMetadata(stmtId, n) {\r\n  var metadata = {\r\n    n: (0, _integer[\"int\"])(n)\r\n  };\r\n\r\n  if (stmtId !== NO_STATEMENT_ID) {\r\n    metadata.qid = (0, _integer[\"int\"])(stmtId);\r\n  }\r\n\r\n  return metadata;\r\n} // constants for messages that never change\r\n\r\n\r\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {\r\n  return 'PULL_ALL';\r\n});\r\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () {\r\n  return 'RESET';\r\n});\r\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {\r\n  return 'COMMIT';\r\n});\r\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {\r\n  return 'ROLLBACK';\r\n});\r\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {\r\n  return 'GOODBYE';\r\n});"]},"metadata":{},"sourceType":"script"}