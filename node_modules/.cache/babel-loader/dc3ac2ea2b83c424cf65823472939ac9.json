{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _error = require(\"../error\");\n\nvar _util = require(\"./util\");\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\n\nvar ALLOWED_VALUES_ENCRYPTED = [null, undefined, true, false, _util.ENCRYPTION_ON, _util.ENCRYPTION_OFF];\nvar ALLOWED_VALUES_TRUST = [null, undefined, 'TRUST_ALL_CERTIFICATES', 'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES', 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'];\n\nvar ChannelConfig =\n/**\r\n * @constructor\r\n * @param {ServerAddress} address the address for the channel to connect to.\r\n * @param {Object} driverConfig the driver config provided by the user when driver is created.\r\n * @param {string} connectionErrorCode the default error code to use on connection errors.\r\n */\nfunction ChannelConfig(address, driverConfig, connectionErrorCode) {\n  (0, _classCallCheck2[\"default\"])(this, ChannelConfig);\n  this.address = address;\n  this.encrypted = extractEncrypted(driverConfig);\n  this.trust = extractTrust(driverConfig);\n  this.trustedCertificates = extractTrustedCertificates(driverConfig);\n  this.knownHostsPath = extractKnownHostsPath(driverConfig);\n  this.connectionErrorCode = connectionErrorCode || _error.SERVICE_UNAVAILABLE;\n  this.connectionTimeout = extractConnectionTimeout(driverConfig);\n};\n\nexports[\"default\"] = ChannelConfig;\n\nfunction extractEncrypted(driverConfig) {\n  var value = driverConfig.encrypted;\n\n  if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n    throw (0, _error.newError)(\"Illegal value of the encrypted setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_ENCRYPTED));\n  }\n\n  return value;\n}\n\nfunction extractTrust(driverConfig) {\n  var value = driverConfig.trust;\n\n  if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n    throw (0, _error.newError)(\"Illegal value of the trust setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_TRUST));\n  }\n\n  return value;\n}\n\nfunction extractTrustedCertificates(driverConfig) {\n  return driverConfig.trustedCertificates || [];\n}\n\nfunction extractKnownHostsPath(driverConfig) {\n  return driverConfig.knownHosts || null;\n}\n\nfunction extractConnectionTimeout(driverConfig) {\n  var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\n\n  if (configuredTimeout === 0) {\n    // timeout explicitly configured to 0\n    return null;\n  } else if (configuredTimeout && configuredTimeout < 0) {\n    // timeout explicitly configured to a negative value\n    return null;\n  } else if (!configuredTimeout) {\n    // timeout not configured, use default value\n    return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n  } else {\n    // timeout configured, use the provided value\n    return configuredTimeout;\n  }\n}","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/internal/channel-config.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_error","_util","DEFAULT_CONNECTION_TIMEOUT_MILLIS","ALLOWED_VALUES_ENCRYPTED","undefined","ENCRYPTION_ON","ENCRYPTION_OFF","ALLOWED_VALUES_TRUST","ChannelConfig","address","driverConfig","connectionErrorCode","encrypted","extractEncrypted","trust","extractTrust","trustedCertificates","extractTrustedCertificates","knownHostsPath","extractKnownHostsPath","SERVICE_UNAVAILABLE","connectionTimeout","extractConnectionTimeout","indexOf","newError","concat","knownHosts","configuredTimeout","parseInt"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = void 0;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _error = require(\"../error\");\r\n\r\nvar _util = require(\"./util\");\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\r\n\r\nvar ALLOWED_VALUES_ENCRYPTED = [null, undefined, true, false, _util.ENCRYPTION_ON, _util.ENCRYPTION_OFF];\r\nvar ALLOWED_VALUES_TRUST = [null, undefined, 'TRUST_ALL_CERTIFICATES', 'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES', 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'];\r\n\r\nvar ChannelConfig =\r\n/**\r\n * @constructor\r\n * @param {ServerAddress} address the address for the channel to connect to.\r\n * @param {Object} driverConfig the driver config provided by the user when driver is created.\r\n * @param {string} connectionErrorCode the default error code to use on connection errors.\r\n */\r\nfunction ChannelConfig(address, driverConfig, connectionErrorCode) {\r\n  (0, _classCallCheck2[\"default\"])(this, ChannelConfig);\r\n  this.address = address;\r\n  this.encrypted = extractEncrypted(driverConfig);\r\n  this.trust = extractTrust(driverConfig);\r\n  this.trustedCertificates = extractTrustedCertificates(driverConfig);\r\n  this.knownHostsPath = extractKnownHostsPath(driverConfig);\r\n  this.connectionErrorCode = connectionErrorCode || _error.SERVICE_UNAVAILABLE;\r\n  this.connectionTimeout = extractConnectionTimeout(driverConfig);\r\n};\r\n\r\nexports[\"default\"] = ChannelConfig;\r\n\r\nfunction extractEncrypted(driverConfig) {\r\n  var value = driverConfig.encrypted;\r\n\r\n  if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\r\n    throw (0, _error.newError)(\"Illegal value of the encrypted setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_ENCRYPTED));\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction extractTrust(driverConfig) {\r\n  var value = driverConfig.trust;\r\n\r\n  if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\r\n    throw (0, _error.newError)(\"Illegal value of the trust setting \".concat(value, \". Expected one of \").concat(ALLOWED_VALUES_TRUST));\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction extractTrustedCertificates(driverConfig) {\r\n  return driverConfig.trustedCertificates || [];\r\n}\r\n\r\nfunction extractKnownHostsPath(driverConfig) {\r\n  return driverConfig.knownHosts || null;\r\n}\r\n\r\nfunction extractConnectionTimeout(driverConfig) {\r\n  var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\r\n\r\n  if (configuredTimeout === 0) {\r\n    // timeout explicitly configured to 0\r\n    return null;\r\n  } else if (configuredTimeout && configuredTimeout < 0) {\r\n    // timeout explicitly configured to a negative value\r\n    return null;\r\n  } else if (!configuredTimeout) {\r\n    // timeout not configured, use default value\r\n    return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\r\n  } else {\r\n    // timeout configured, use the provided value\r\n    return configuredTimeout;\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}