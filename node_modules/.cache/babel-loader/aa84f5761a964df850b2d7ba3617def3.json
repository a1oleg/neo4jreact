{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a1ole\\\\Documents\\\\GitHub\\\\neo4jreact\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport RequestHead from \"./RequestHead\";\n\nvar neo4j = require('neo4j-driver');\n\nconst driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'letmein'));\n\nconst xfetch = query => {\n  const session = driver.session({\n    defaultAccessMode: neo4j.session.READ\n  });\n  const res = [];\n  session.run(query).subscribe({\n    //onKeys: keys => {\n    //console.log(keys)\n    //},\n    onNext: record => {\n      //console.log(this.state.allDirs);\n      res.push(record.get('x').properties.description);\n    },\n    onCompleted: () => {\n      session.close(); // returns a Promise\n\n      return res; // this.setState(({ allDirs }) => {\n      //   const newArr = [...allDirs, res];\n      //   return {\n      //     allDirs: newArr\n      //   };\n      // });\n    },\n    onError: error => {\n      console.log(error);\n    }\n  });\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAllDirs = () => {\n      //const res = this.xfetch('MATCH (x:Dir) RETURN x');\n      const res = new xfetch('MATCH (x:Dir) RETURN x');\n      this.setState(({\n        allDirs\n      }) => {\n        const newArr = [...allDirs, res.map(x => x.properties.description)];\n        return {\n          allDirs: newArr\n        };\n      });\n    };\n\n    this.state = {\n      allDirs: ['blabla'],\n      actDirs: [],\n      results: []\n    };\n    this.driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'letmein'));\n    this.fetchAllDirs();\n  } // xfetch = (query) => {\n  //   const session = this.driver.session({ defaultAccessMode: neo4j.session.READ });\n  //   const res = [];\n  //   session\n  //   .run(query)\n  //   .subscribe({\n  //     //onKeys: keys => {\n  //       //console.log(keys)\n  //     //},\n  //     onNext: record => {\n  //       //console.log(this.state.allDirs);\n  //       res.push(record.get('x').properties.description);        \n  //     },\n  //     onCompleted: () => {        \n  //       session.close();// returns a Promise\n  //       return res;\n  //       // this.setState(({ allDirs }) => {\n  //       //   const newArr = [...allDirs, res];\n  //       //   return {\n  //       //     allDirs: newArr\n  //       //   };\n  //       // });\n  //     },\n  //     onError: error => {\n  //       console.log(error)\n  //     }\n  //   });    \n  // }\n\n\n  // addDir = input => {\n  //   this.setState(({ actDirs }) => {\n  //     const newArr = [...actDirs, input];\n  //     return {\n  //       actDirs: newArr\n  //     };\n  //   });\n  // };\n  render() {\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, this.state.allDirs.map(n => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }, n);\n    }), /*#__PURE__*/React.createElement(RequestHead, {\n      allDirs: this.state.allDirs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/src/App.js"],"names":["React","Component","RequestHead","neo4j","require","driver","auth","basic","xfetch","query","session","defaultAccessMode","READ","res","run","subscribe","onNext","record","push","get","properties","description","onCompleted","close","onError","error","console","log","App","constructor","props","fetchAllDirs","setState","allDirs","newArr","map","x","state","actDirs","results","render","n"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport RequestHead from \"./RequestHead\";\r\n\r\nvar neo4j = require('neo4j-driver')\r\n\r\nconst driver = neo4j.driver(\r\n  'bolt://localhost:7687',\r\n  neo4j.auth.basic('neo4j', 'letmein'))\r\n\r\nconst xfetch = (query) => {\r\n  const session = driver.session({ defaultAccessMode: neo4j.session.READ });\r\n  const res = [];\r\n  session\r\n  .run(query)\r\n  .subscribe({\r\n    //onKeys: keys => {\r\n      //console.log(keys)\r\n    //},\r\n    onNext: record => {\r\n      //console.log(this.state.allDirs);\r\n      res.push(record.get('x').properties.description);        \r\n    },\r\n    onCompleted: () => {        \r\n      session.close();// returns a Promise\r\n      return res;\r\n      \r\n      // this.setState(({ allDirs }) => {\r\n      //   const newArr = [...allDirs, res];\r\n  \r\n      //   return {\r\n      //     allDirs: newArr\r\n      //   };\r\n      // });\r\n    },\r\n    onError: error => {\r\n      console.log(error)\r\n    }\r\n  });    \r\n}\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      allDirs: ['blabla'],\r\n      actDirs: [],\r\n      results: [],\r\n\r\n    };\r\n    \r\n    this.driver = neo4j.driver(\r\n      'bolt://localhost:7687',\r\n      neo4j.auth.basic('neo4j', 'letmein')\r\n    )\r\n    \r\n    this.fetchAllDirs();  \r\n\r\n  }\r\n\r\n  // xfetch = (query) => {\r\n  //   const session = this.driver.session({ defaultAccessMode: neo4j.session.READ });\r\n  //   const res = [];\r\n  //   session\r\n  //   .run(query)\r\n  //   .subscribe({\r\n  //     //onKeys: keys => {\r\n  //       //console.log(keys)\r\n  //     //},\r\n  //     onNext: record => {\r\n  //       //console.log(this.state.allDirs);\r\n  //       res.push(record.get('x').properties.description);        \r\n  //     },\r\n  //     onCompleted: () => {        \r\n  //       session.close();// returns a Promise\r\n  //       return res;\r\n        \r\n  //       // this.setState(({ allDirs }) => {\r\n  //       //   const newArr = [...allDirs, res];\r\n    \r\n  //       //   return {\r\n  //       //     allDirs: newArr\r\n  //       //   };\r\n  //       // });\r\n  //     },\r\n  //     onError: error => {\r\n  //       console.log(error)\r\n  //     }\r\n  //   });    \r\n  // }\r\n\r\n  fetchAllDirs = () => {\r\n    //const res = this.xfetch('MATCH (x:Dir) RETURN x');\r\n    const res = new xfetch('MATCH (x:Dir) RETURN x');\r\n    this.setState(({ allDirs }) => {\r\n          const newArr = [...allDirs, res.map(x => x.properties.description)];\r\n    \r\n          return {\r\n            allDirs: newArr\r\n          };\r\n        });  \r\n      \r\n  };\r\n\r\n\r\n  \r\n  \r\n  // addDir = input => {\r\n  //   this.setState(({ actDirs }) => {\r\n  //     const newArr = [...actDirs, input];\r\n\r\n  //     return {\r\n  //       actDirs: newArr\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  render() {      \r\n      return (      \r\n      <main> \r\n        {this.state.allDirs.map(n => {\r\n         return <div>{n}</div>;\r\n       })}       \r\n        <RequestHead allDirs={this.state.allDirs} /> \r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}