{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDuration = isDuration;\nexports.isLocalTime = isLocalTime;\nexports.isTime = isTime;\nexports.isDate = isDate;\nexports.isLocalDateTime = isLocalDateTime;\nexports.isDateTime = isDateTime;\nexports.DateTime = exports.LocalDateTime = exports.Date = exports.Time = exports.LocalTime = exports.Duration = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar util = _interopRequireWildcard(require(\"./internal/temporal-util\"));\n\nvar _util = require(\"./internal/util\");\n\nvar _error = require(\"./error\");\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\r\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\r\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar Duration = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} months - The number of months for the new duration.\r\n   * @param {Integer|number} days - The number of days for the new duration.\r\n   * @param {Integer|number} seconds - The number of seconds for the new duration.\r\n   * @param {Integer|number} nanoseconds - The number of nanoseconds for the new duration.\r\n   */\n  function Duration(months, days, seconds, nanoseconds) {\n    (0, _classCallCheck2[\"default\"])(this, Duration);\n    /**\r\n     * The number of months.\r\n     * @type {Integer|number}\r\n     */\n\n    this.months = (0, _util.assertNumberOrInteger)(months, 'Months');\n    /**\r\n     * The number of days.\r\n     * @type {Integer|number}\r\n     */\n\n    this.days = (0, _util.assertNumberOrInteger)(days, 'Days');\n    (0, _util.assertNumberOrInteger)(seconds, 'Seconds');\n    (0, _util.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n    /**\r\n     * The number of seconds.\r\n     * @type {Integer|number}\r\n     */\n\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n    /**\r\n     * The number of nanoseconds.\r\n     * @type {Integer|number}\r\n     */\n\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n    Object.freeze(this);\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  (0, _createClass2[\"default\"])(Duration, [{\n    key: \"toString\",\n    value: function toString() {\n      return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n    }\n  }]);\n  return Duration;\n}();\n\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link Duration} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\r\n */\n\nfunction isDuration(obj) {\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\n/**\r\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\r\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\n\nvar LocalTime = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} hour - The hour for the new local time.\r\n   * @param {Integer|number} minute - The minute for the new local time.\r\n   * @param {Integer|number} second - The second for the new local time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new local time.\r\n   */\n  function LocalTime(hour, minute, second, nanosecond) {\n    (0, _classCallCheck2[\"default\"])(this, LocalTime);\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Year, month, day and time zone offset components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {LocalTime} New LocalTime.\r\n   */\n\n\n  (0, _createClass2[\"default\"])(LocalTime, [{\n    key: \"toString\",\n\n    /**\r\n     * @ignore\r\n     */\n    value: function toString() {\n      return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond));\n    }\n  }]);\n  return LocalTime;\n}();\n\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link LocalTime} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\r\n */\n\nfunction isLocalTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\n/**\r\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\r\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\n\nvar Time = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} hour - The hour for the new local time.\r\n   * @param {Integer|number} minute - The minute for the new local time.\r\n   * @param {Integer|number} second - The second for the new local time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new local time.\r\n   * @param {Integer|number} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\r\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n   */\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n    (0, _classCallCheck2[\"default\"])(this, Time);\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    /**\r\n     * The time zone offset in seconds.\r\n     * @type {Integer|number}\r\n     */\n\n    this.timeZoneOffsetSeconds = (0, _util.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Year, month and day components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {Time} New Time.\r\n   */\n\n\n  (0, _createClass2[\"default\"])(Time, [{\n    key: \"toString\",\n\n    /**\r\n     * @ignore\r\n     */\n    value: function toString() {\n      return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond), util.timeZoneOffsetInSeconds(standardDate));\n    }\n  }]);\n  return Time;\n}();\n\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link Time} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\r\n */\n\nfunction isTime(obj) {\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\n/**\r\n * Represents an instant capturing the date, but not the time, nor the timezone.\r\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\n\nvar Date = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} year - The year for the new local date.\r\n   * @param {Integer|number} month - The month for the new local date.\r\n   * @param {Integer|number} day - The day for the new local date.\r\n   */\n  function Date(year, month, day) {\n    (0, _classCallCheck2[\"default\"])(this, Date);\n    /**\r\n     * The year.\r\n     * @type {Integer|number}\r\n     */\n\n    this.year = util.assertValidYear(year);\n    /**\r\n     * The month.\r\n     * @type {Integer|number}\r\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\r\n     * The day.\r\n     * @type {Integer|number}\r\n     */\n\n    this.day = util.assertValidDay(day);\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link Date} object from the given standard JavaScript `Date`.\r\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @return {Date} New Date.\r\n   */\n\n\n  (0, _createClass2[\"default\"])(Date, [{\n    key: \"toString\",\n\n    /**\r\n     * @ignore\r\n     */\n    value: function toString() {\n      return util.dateToIsoString(this.year, this.month, this.day);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate) {\n      verifyStandardDateAndNanos(standardDate, null);\n      return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n    }\n  }]);\n  return Date;\n}();\n\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link Date} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\r\n */\n\nfunction isDate(obj) {\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\n/**\r\n * Represents an instant capturing the date and the time, but not the timezone.\r\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\n\nvar LocalDateTime = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} year - The year for the new local date.\r\n   * @param {Integer|number} month - The month for the new local date.\r\n   * @param {Integer|number} day - The day for the new local date.\r\n   * @param {Integer|number} hour - The hour for the new local time.\r\n   * @param {Integer|number} minute - The minute for the new local time.\r\n   * @param {Integer|number} second - The second for the new local time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new local time.\r\n   */\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n    (0, _classCallCheck2[\"default\"])(this, LocalDateTime);\n    /**\r\n     * The year.\r\n     * @type {Integer|number}\r\n     */\n\n    this.year = util.assertValidYear(year);\n    /**\r\n     * The month.\r\n     * @type {Integer|number}\r\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\r\n     * The day.\r\n     * @type {Integer|number}\r\n     */\n\n    this.day = util.assertValidDay(day);\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Time zone offset component of the given date is ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {LocalDateTime} New LocalDateTime.\r\n   */\n\n\n  (0, _createClass2[\"default\"])(LocalDateTime, [{\n    key: \"toString\",\n\n    /**\r\n     * @ignore\r\n     */\n    value: function toString() {\n      return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond));\n    }\n  }]);\n  return LocalDateTime;\n}();\n\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link LocalDateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\r\n */\n\nfunction isLocalDateTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\n/**\r\n * Represents an instant capturing the date, the time and the timezone identifier.\r\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\n\nvar DateTime = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} year - The year for the new date-time.\r\n   * @param {Integer|number} month - The month for the new date-time.\r\n   * @param {Integer|number} day - The day for the new date-time.\r\n   * @param {Integer|number} hour - The hour for the new date-time.\r\n   * @param {Integer|number} minute - The minute for the new date-time.\r\n   * @param {Integer|number} second - The second for the new date-time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new date-time.\r\n   * @param {Integer|number} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\r\n   * Value represents the difference, in seconds, from UTC to local time.\r\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n   * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\r\n   */\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n    (0, _classCallCheck2[\"default\"])(this, DateTime);\n    /**\r\n     * The year.\r\n     * @type {Integer|number}\r\n     */\n\n    this.year = util.assertValidYear(year);\n    /**\r\n     * The month.\r\n     * @type {Integer|number}\r\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\r\n     * The day.\r\n     * @type {Integer|number}\r\n     */\n\n    this.day = util.assertValidDay(day);\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n\n    var _verifyTimeZoneArgume = verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId),\n        _verifyTimeZoneArgume2 = (0, _slicedToArray2[\"default\"])(_verifyTimeZoneArgume, 2),\n        offset = _verifyTimeZoneArgume2[0],\n        id = _verifyTimeZoneArgume2[1];\n    /**\r\n     * The time zone offset in seconds.\r\n     *\r\n     * *Either this or {@link timeZoneId} is defined.*\r\n     *\r\n     * @type {Integer|number}\r\n     */\n\n\n    this.timeZoneOffsetSeconds = offset;\n    /**\r\n     * The time zone id.\r\n     *\r\n     * *Either this or {@link timeZoneOffsetSeconds} is defined.*\r\n     *\r\n     * @type {string}\r\n     */\n\n    this.timeZoneId = id;\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {DateTime} New DateTime.\r\n   */\n\n\n  (0, _createClass2[\"default\"])(DateTime, [{\n    key: \"toString\",\n\n    /**\r\n     * @ignore\r\n     */\n    value: function toString() {\n      var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n      var timeZoneStr = this.timeZoneId ? \"[\".concat(this.timeZoneId, \"]\") : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n      return localDateTimeStr + timeZoneStr;\n    }\n  }], [{\n    key: \"fromStandardDate\",\n    value: function fromStandardDate(standardDate, nanosecond) {\n      verifyStandardDateAndNanos(standardDate, nanosecond);\n      return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond), util.timeZoneOffsetInSeconds(standardDate), null\n      /* no time zone id */\n      );\n    }\n  }]);\n  return DateTime;\n}();\n\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link DateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\r\n */\n\nfunction isDateTime(obj) {\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\n\nfunction hasIdentifierProperty(obj, property) {\n  return (obj && obj[property]) === true;\n}\n\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\n}\n\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n  var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\n  var idDefined = timeZoneId && timeZoneId !== '';\n\n  if (offsetDefined && !idDefined) {\n    (0, _util.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    return [timeZoneOffsetSeconds, null];\n  } else if (!offsetDefined && idDefined) {\n    (0, _util.assertString)(timeZoneId, 'Time zone ID');\n    return [null, timeZoneId];\n  } else if (offsetDefined && idDefined) {\n    throw (0, _error.newError)(\"Unable to create DateTime with both time zone offset and id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n  } else {\n    throw (0, _error.newError)(\"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n  }\n}\n\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n  (0, _util.assertValidDate)(standardDate, 'Standard date');\n\n  if (nanosecond !== null && nanosecond !== undefined) {\n    (0, _util.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n  }\n}","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/temporal-types.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","isDuration","isLocalTime","isTime","isDate","isLocalDateTime","isDateTime","DateTime","LocalDateTime","Date","Time","LocalTime","Duration","_slicedToArray2","_classCallCheck2","_createClass2","util","_util","_error","IDENTIFIER_PROPERTY_ATTRIBUTES","enumerable","configurable","writable","DURATION_IDENTIFIER_PROPERTY","LOCAL_TIME_IDENTIFIER_PROPERTY","TIME_IDENTIFIER_PROPERTY","DATE_IDENTIFIER_PROPERTY","LOCAL_DATE_TIME_IDENTIFIER_PROPERTY","DATE_TIME_IDENTIFIER_PROPERTY","months","days","seconds","nanoseconds","assertNumberOrInteger","normalizeSecondsForDuration","normalizeNanosecondsForDuration","freeze","key","toString","durationToIsoString","prototype","obj","hasIdentifierProperty","hour","minute","second","nanosecond","assertValidHour","assertValidMinute","assertValidSecond","assertValidNanosecond","timeToIsoString","fromStandardDate","standardDate","verifyStandardDateAndNanos","getHours","getMinutes","getSeconds","totalNanoseconds","timeZoneOffsetSeconds","timeZoneOffsetToIsoString","timeZoneOffsetInSeconds","year","month","day","assertValidYear","assertValidMonth","assertValidDay","dateToIsoString","getFullYear","getMonth","getDate","localDateTimeToString","timeZoneId","_verifyTimeZoneArgume","verifyTimeZoneArguments","_verifyTimeZoneArgume2","offset","id","localDateTimeStr","timeZoneStr","concat","property","offsetDefined","idDefined","assertString","newError","assertValidDate","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.isDuration = isDuration;\r\nexports.isLocalTime = isLocalTime;\r\nexports.isTime = isTime;\r\nexports.isDate = isDate;\r\nexports.isLocalDateTime = isLocalDateTime;\r\nexports.isDateTime = isDateTime;\r\nexports.DateTime = exports.LocalDateTime = exports.Date = exports.Time = exports.LocalTime = exports.Duration = void 0;\r\n\r\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\r\n\r\nvar util = _interopRequireWildcard(require(\"./internal/temporal-util\"));\r\n\r\nvar _util = require(\"./internal/util\");\r\n\r\nvar _error = require(\"./error\");\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\r\n  value: true,\r\n  enumerable: false,\r\n  configurable: false,\r\n  writable: false\r\n};\r\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\r\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\r\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\r\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\r\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\r\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\r\n/**\r\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\r\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\n\r\nvar Duration =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} months - The number of months for the new duration.\r\n   * @param {Integer|number} days - The number of days for the new duration.\r\n   * @param {Integer|number} seconds - The number of seconds for the new duration.\r\n   * @param {Integer|number} nanoseconds - The number of nanoseconds for the new duration.\r\n   */\r\n  function Duration(months, days, seconds, nanoseconds) {\r\n    (0, _classCallCheck2[\"default\"])(this, Duration);\r\n\r\n    /**\r\n     * The number of months.\r\n     * @type {Integer|number}\r\n     */\r\n    this.months = (0, _util.assertNumberOrInteger)(months, 'Months');\r\n    /**\r\n     * The number of days.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.days = (0, _util.assertNumberOrInteger)(days, 'Days');\r\n    (0, _util.assertNumberOrInteger)(seconds, 'Seconds');\r\n    (0, _util.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\r\n    /**\r\n     * The number of seconds.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\r\n    /**\r\n     * The number of nanoseconds.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\r\n    Object.freeze(this);\r\n  }\r\n  /**\r\n   * @ignore\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(Duration, [{\r\n    key: \"toString\",\r\n    value: function toString() {\r\n      return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\r\n    }\r\n  }]);\r\n  return Duration;\r\n}();\r\n\r\nexports.Duration = Duration;\r\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link Duration} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\r\n */\r\n\r\nfunction isDuration(obj) {\r\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\r\n}\r\n/**\r\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\r\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\n\r\n\r\nvar LocalTime =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} hour - The hour for the new local time.\r\n   * @param {Integer|number} minute - The minute for the new local time.\r\n   * @param {Integer|number} second - The second for the new local time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new local time.\r\n   */\r\n  function LocalTime(hour, minute, second, nanosecond) {\r\n    (0, _classCallCheck2[\"default\"])(this, LocalTime);\r\n\r\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\r\n    this.hour = util.assertValidHour(hour);\r\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.minute = util.assertValidMinute(minute);\r\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.second = util.assertValidSecond(second);\r\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n    Object.freeze(this);\r\n  }\r\n  /**\r\n   * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Year, month, day and time zone offset components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {LocalTime} New LocalTime.\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(LocalTime, [{\r\n    key: \"toString\",\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    value: function toString() {\r\n      return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\r\n    }\r\n  }], [{\r\n    key: \"fromStandardDate\",\r\n    value: function fromStandardDate(standardDate, nanosecond) {\r\n      verifyStandardDateAndNanos(standardDate, nanosecond);\r\n      return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond));\r\n    }\r\n  }]);\r\n  return LocalTime;\r\n}();\r\n\r\nexports.LocalTime = LocalTime;\r\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link LocalTime} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\r\n */\r\n\r\nfunction isLocalTime(obj) {\r\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\r\n}\r\n/**\r\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\r\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\n\r\n\r\nvar Time =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} hour - The hour for the new local time.\r\n   * @param {Integer|number} minute - The minute for the new local time.\r\n   * @param {Integer|number} second - The second for the new local time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new local time.\r\n   * @param {Integer|number} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\r\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n   */\r\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\r\n    (0, _classCallCheck2[\"default\"])(this, Time);\r\n\r\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\r\n    this.hour = util.assertValidHour(hour);\r\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.minute = util.assertValidMinute(minute);\r\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.second = util.assertValidSecond(second);\r\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n    /**\r\n     * The time zone offset in seconds.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.timeZoneOffsetSeconds = (0, _util.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\r\n    Object.freeze(this);\r\n  }\r\n  /**\r\n   * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Year, month and day components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {Time} New Time.\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(Time, [{\r\n    key: \"toString\",\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    value: function toString() {\r\n      return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\r\n    }\r\n  }], [{\r\n    key: \"fromStandardDate\",\r\n    value: function fromStandardDate(standardDate, nanosecond) {\r\n      verifyStandardDateAndNanos(standardDate, nanosecond);\r\n      return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond), util.timeZoneOffsetInSeconds(standardDate));\r\n    }\r\n  }]);\r\n  return Time;\r\n}();\r\n\r\nexports.Time = Time;\r\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link Time} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\r\n */\r\n\r\nfunction isTime(obj) {\r\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\r\n}\r\n/**\r\n * Represents an instant capturing the date, but not the time, nor the timezone.\r\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\n\r\n\r\nvar Date =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} year - The year for the new local date.\r\n   * @param {Integer|number} month - The month for the new local date.\r\n   * @param {Integer|number} day - The day for the new local date.\r\n   */\r\n  function Date(year, month, day) {\r\n    (0, _classCallCheck2[\"default\"])(this, Date);\r\n\r\n    /**\r\n     * The year.\r\n     * @type {Integer|number}\r\n     */\r\n    this.year = util.assertValidYear(year);\r\n    /**\r\n     * The month.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.month = util.assertValidMonth(month);\r\n    /**\r\n     * The day.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.day = util.assertValidDay(day);\r\n    Object.freeze(this);\r\n  }\r\n  /**\r\n   * Create a {@link Date} object from the given standard JavaScript `Date`.\r\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @return {Date} New Date.\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(Date, [{\r\n    key: \"toString\",\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    value: function toString() {\r\n      return util.dateToIsoString(this.year, this.month, this.day);\r\n    }\r\n  }], [{\r\n    key: \"fromStandardDate\",\r\n    value: function fromStandardDate(standardDate) {\r\n      verifyStandardDateAndNanos(standardDate, null);\r\n      return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\r\n    }\r\n  }]);\r\n  return Date;\r\n}();\r\n\r\nexports.Date = Date;\r\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link Date} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\r\n */\r\n\r\nfunction isDate(obj) {\r\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\r\n}\r\n/**\r\n * Represents an instant capturing the date and the time, but not the timezone.\r\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\n\r\n\r\nvar LocalDateTime =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} year - The year for the new local date.\r\n   * @param {Integer|number} month - The month for the new local date.\r\n   * @param {Integer|number} day - The day for the new local date.\r\n   * @param {Integer|number} hour - The hour for the new local time.\r\n   * @param {Integer|number} minute - The minute for the new local time.\r\n   * @param {Integer|number} second - The second for the new local time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new local time.\r\n   */\r\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\r\n    (0, _classCallCheck2[\"default\"])(this, LocalDateTime);\r\n\r\n    /**\r\n     * The year.\r\n     * @type {Integer|number}\r\n     */\r\n    this.year = util.assertValidYear(year);\r\n    /**\r\n     * The month.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.month = util.assertValidMonth(month);\r\n    /**\r\n     * The day.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.day = util.assertValidDay(day);\r\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.hour = util.assertValidHour(hour);\r\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.minute = util.assertValidMinute(minute);\r\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.second = util.assertValidSecond(second);\r\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n    Object.freeze(this);\r\n  }\r\n  /**\r\n   * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Time zone offset component of the given date is ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {LocalDateTime} New LocalDateTime.\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(LocalDateTime, [{\r\n    key: \"toString\",\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    value: function toString() {\r\n      return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\r\n    }\r\n  }], [{\r\n    key: \"fromStandardDate\",\r\n    value: function fromStandardDate(standardDate, nanosecond) {\r\n      verifyStandardDateAndNanos(standardDate, nanosecond);\r\n      return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond));\r\n    }\r\n  }]);\r\n  return LocalDateTime;\r\n}();\r\n\r\nexports.LocalDateTime = LocalDateTime;\r\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link LocalDateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\r\n */\r\n\r\nfunction isLocalDateTime(obj) {\r\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\r\n}\r\n/**\r\n * Represents an instant capturing the date, the time and the timezone identifier.\r\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\n\r\n\r\nvar DateTime =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {Integer|number} year - The year for the new date-time.\r\n   * @param {Integer|number} month - The month for the new date-time.\r\n   * @param {Integer|number} day - The day for the new date-time.\r\n   * @param {Integer|number} hour - The hour for the new date-time.\r\n   * @param {Integer|number} minute - The minute for the new date-time.\r\n   * @param {Integer|number} second - The second for the new date-time.\r\n   * @param {Integer|number} nanosecond - The nanosecond for the new date-time.\r\n   * @param {Integer|number} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\r\n   * Value represents the difference, in seconds, from UTC to local time.\r\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n   * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\r\n   */\r\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\r\n    (0, _classCallCheck2[\"default\"])(this, DateTime);\r\n\r\n    /**\r\n     * The year.\r\n     * @type {Integer|number}\r\n     */\r\n    this.year = util.assertValidYear(year);\r\n    /**\r\n     * The month.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.month = util.assertValidMonth(month);\r\n    /**\r\n     * The day.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.day = util.assertValidDay(day);\r\n    /**\r\n     * The hour.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.hour = util.assertValidHour(hour);\r\n    /**\r\n     * The minute.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.minute = util.assertValidMinute(minute);\r\n    /**\r\n     * The second.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.second = util.assertValidSecond(second);\r\n    /**\r\n     * The nanosecond.\r\n     * @type {Integer|number}\r\n     */\r\n\r\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n\r\n    var _verifyTimeZoneArgume = verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId),\r\n        _verifyTimeZoneArgume2 = (0, _slicedToArray2[\"default\"])(_verifyTimeZoneArgume, 2),\r\n        offset = _verifyTimeZoneArgume2[0],\r\n        id = _verifyTimeZoneArgume2[1];\r\n    /**\r\n     * The time zone offset in seconds.\r\n     *\r\n     * *Either this or {@link timeZoneId} is defined.*\r\n     *\r\n     * @type {Integer|number}\r\n     */\r\n\r\n\r\n    this.timeZoneOffsetSeconds = offset;\r\n    /**\r\n     * The time zone id.\r\n     *\r\n     * *Either this or {@link timeZoneOffsetSeconds} is defined.*\r\n     *\r\n     * @type {string}\r\n     */\r\n\r\n    this.timeZoneId = id;\r\n    Object.freeze(this);\r\n  }\r\n  /**\r\n   * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {Integer|number|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {DateTime} New DateTime.\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(DateTime, [{\r\n    key: \"toString\",\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    value: function toString() {\r\n      var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\r\n      var timeZoneStr = this.timeZoneId ? \"[\".concat(this.timeZoneId, \"]\") : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\r\n      return localDateTimeStr + timeZoneStr;\r\n    }\r\n  }], [{\r\n    key: \"fromStandardDate\",\r\n    value: function fromStandardDate(standardDate, nanosecond) {\r\n      verifyStandardDateAndNanos(standardDate, nanosecond);\r\n      return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), util.totalNanoseconds(standardDate, nanosecond), util.timeZoneOffsetInSeconds(standardDate), null\r\n      /* no time zone id */\r\n      );\r\n    }\r\n  }]);\r\n  return DateTime;\r\n}();\r\n\r\nexports.DateTime = DateTime;\r\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link DateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\r\n */\r\n\r\nfunction isDateTime(obj) {\r\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\r\n}\r\n\r\nfunction hasIdentifierProperty(obj, property) {\r\n  return (obj && obj[property]) === true;\r\n}\r\n\r\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\r\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\r\n}\r\n\r\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\r\n  var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\r\n  var idDefined = timeZoneId && timeZoneId !== '';\r\n\r\n  if (offsetDefined && !idDefined) {\r\n    (0, _util.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\r\n    return [timeZoneOffsetSeconds, null];\r\n  } else if (!offsetDefined && idDefined) {\r\n    (0, _util.assertString)(timeZoneId, 'Time zone ID');\r\n    return [null, timeZoneId];\r\n  } else if (offsetDefined && idDefined) {\r\n    throw (0, _error.newError)(\"Unable to create DateTime with both time zone offset and id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\r\n  } else {\r\n    throw (0, _error.newError)(\"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\r\n  }\r\n}\r\n\r\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\r\n  (0, _util.assertValidDate)(standardDate, 'Standard date');\r\n\r\n  if (nanosecond !== null && nanosecond !== undefined) {\r\n    (0, _util.assertNumberOrInteger)(nanosecond, 'Nanosecond');\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}