{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RoundRobinArrayIndex = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   * @param {number} [initialOffset=0] the initial offset for round robin.\r\n   */\n  function RoundRobinArrayIndex(initialOffset) {\n    (0, _classCallCheck2[\"default\"])(this, RoundRobinArrayIndex);\n    this._offset = initialOffset || 0;\n  }\n  /**\r\n   * Get next index for an array with given length.\r\n   * @param {number} arrayLength the array length.\r\n   * @return {number} index in the array.\r\n   */\n\n\n  (0, _createClass2[\"default\"])(RoundRobinArrayIndex, [{\n    key: \"next\",\n    value: function next(arrayLength) {\n      if (arrayLength === 0) {\n        return -1;\n      }\n\n      var nextOffset = this._offset;\n      this._offset += 1;\n\n      if (this._offset === Number.MAX_SAFE_INTEGER) {\n        this._offset = 0;\n      }\n\n      return nextOffset % arrayLength;\n    }\n  }]);\n  return RoundRobinArrayIndex;\n}();\n\nexports[\"default\"] = RoundRobinArrayIndex;","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/internal/round-robin-array-index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","RoundRobinArrayIndex","initialOffset","_offset","key","next","arrayLength","nextOffset","Number","MAX_SAFE_INTEGER"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,gBAAgB,GAAGN,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIM,aAAa,GAAGP,sBAAsB,CAACC,OAAO,CAAC,oCAAD,CAAR,CAA1C;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIO,oBAAoB,GACxB,aACA,YAAY;AACV;;;;AAIA,WAASA,oBAAT,CAA8BC,aAA9B,EAA6C;AAC3C,KAAC,GAAGH,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCE,oBAAvC;AACA,SAAKE,OAAL,GAAeD,aAAa,IAAI,CAAhC;AACD;AACD;;;;;;;AAOA,GAAC,GAAGF,aAAa,CAAC,SAAD,CAAjB,EAA8BC,oBAA9B,EAAoD,CAAC;AACnDG,IAAAA,GAAG,EAAE,MAD8C;AAEnDN,IAAAA,KAAK,EAAE,SAASO,IAAT,CAAcC,WAAd,EAA2B;AAChC,UAAIA,WAAW,KAAK,CAApB,EAAuB;AACrB,eAAO,CAAC,CAAR;AACD;;AAED,UAAIC,UAAU,GAAG,KAAKJ,OAAtB;AACA,WAAKA,OAAL,IAAgB,CAAhB;;AAEA,UAAI,KAAKA,OAAL,KAAiBK,MAAM,CAACC,gBAA5B,EAA8C;AAC5C,aAAKN,OAAL,GAAe,CAAf;AACD;;AAED,aAAOI,UAAU,GAAGD,WAApB;AACD;AAfkD,GAAD,CAApD;AAiBA,SAAOL,oBAAP;AACD,CAlCD,EAFA;;AAsCAJ,OAAO,CAAC,SAAD,CAAP,GAAqBI,oBAArB","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = void 0;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RoundRobinArrayIndex =\r\n/*#__PURE__*/\r\nfunction () {\r\n  /**\r\n   * @constructor\r\n   * @param {number} [initialOffset=0] the initial offset for round robin.\r\n   */\r\n  function RoundRobinArrayIndex(initialOffset) {\r\n    (0, _classCallCheck2[\"default\"])(this, RoundRobinArrayIndex);\r\n    this._offset = initialOffset || 0;\r\n  }\r\n  /**\r\n   * Get next index for an array with given length.\r\n   * @param {number} arrayLength the array length.\r\n   * @return {number} index in the array.\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(RoundRobinArrayIndex, [{\r\n    key: \"next\",\r\n    value: function next(arrayLength) {\r\n      if (arrayLength === 0) {\r\n        return -1;\r\n      }\r\n\r\n      var nextOffset = this._offset;\r\n      this._offset += 1;\r\n\r\n      if (this._offset === Number.MAX_SAFE_INTEGER) {\r\n        this._offset = 0;\r\n      }\r\n\r\n      return nextOffset % arrayLength;\r\n    }\r\n  }]);\r\n  return RoundRobinArrayIndex;\r\n}();\r\n\r\nexports[\"default\"] = RoundRobinArrayIndex;"]},"metadata":{},"sourceType":"script"}