{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompletedObserver = exports.FailedObserver = exports.ResetObserver = exports.LoginObserver = exports.ResultStreamObserver = exports.StreamObserver = void 0;\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _record = _interopRequireDefault(require(\"../record\"));\n\nvar _connection = _interopRequireDefault(require(\"./connection\"));\n\nvar _error = require(\"../error\");\n\nvar _integer = _interopRequireDefault(require(\"../integer\"));\n\nvar _requestMessage = require(\"./request-message\");\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StreamObserver = /*#__PURE__*/function () {\n  function StreamObserver() {\n    (0, _classCallCheck2[\"default\"])(this, StreamObserver);\n  }\n\n  (0, _createClass2[\"default\"])(StreamObserver, [{\n    key: \"onNext\",\n    value: function onNext(rawRecord) {}\n  }, {\n    key: \"onError\",\n    value: function onError(error) {}\n  }, {\n    key: \"onCompleted\",\n    value: function onCompleted(meta) {}\n  }]);\n  return StreamObserver;\n}();\n/**\r\n * Handles a RUN/PULL_ALL, or RUN/DISCARD_ALL requests, maps the responses\r\n * in a way that a user-provided observer can see these as a clean Stream\r\n * of records.\r\n * This class will queue up incoming messages until a user-provided observer\r\n * for the incoming stream is registered. Thus, we keep fields around\r\n * for tracking head/records/tail. These are only used if there is no\r\n * observer registered.\r\n * @access private\r\n */\n\n\nexports.StreamObserver = StreamObserver;\n\nvar ResultStreamObserver = /*#__PURE__*/function (_StreamObserver) {\n  (0, _inherits2[\"default\"])(ResultStreamObserver, _StreamObserver);\n  /**\r\n   *\r\n   * @param {Object} param\r\n   * @param {Connection} param.connection\r\n   * @param {boolean} param.reactive\r\n   * @param {function(connection: Connection, stmtId: number|Integer, n: number|Integer, observer: StreamObserver)} param.moreFunction -\r\n   * @param {function(connection: Connection, stmtId: number|Integer, observer: StreamObserver)} param.discardFunction -\r\n   * @param {number|Integer} param.fetchSize -\r\n   * @param {function(err: Error): Promise|void} param.beforeError -\r\n   * @param {function(err: Error): Promise|void} param.afterError -\r\n   * @param {function(keys: string[]): Promise|void} param.beforeKeys -\r\n   * @param {function(keys: string[]): Promise|void} param.afterKeys -\r\n   * @param {function(metadata: Object): Promise|void} param.beforeComplete -\r\n   * @param {function(metadata: Object): Promise|void} param.afterComplete -\r\n   */\n\n  function ResultStreamObserver() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        connection = _ref.connection,\n        _ref$reactive = _ref.reactive,\n        reactive = _ref$reactive === void 0 ? false : _ref$reactive,\n        moreFunction = _ref.moreFunction,\n        discardFunction = _ref.discardFunction,\n        _ref$fetchSize = _ref.fetchSize,\n        fetchSize = _ref$fetchSize === void 0 ? _requestMessage.ALL : _ref$fetchSize,\n        beforeError = _ref.beforeError,\n        afterError = _ref.afterError,\n        beforeKeys = _ref.beforeKeys,\n        afterKeys = _ref.afterKeys,\n        beforeComplete = _ref.beforeComplete,\n        afterComplete = _ref.afterComplete;\n\n    (0, _classCallCheck2[\"default\"])(this, ResultStreamObserver);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ResultStreamObserver).call(this));\n    _this._connection = connection;\n    _this._fieldKeys = null;\n    _this._fieldLookup = null;\n    _this._head = null;\n    _this._queuedRecords = [];\n    _this._tail = null;\n    _this._error = null;\n    _this._observers = [];\n    _this._meta = {};\n    _this._beforeError = beforeError;\n    _this._afterError = afterError;\n    _this._beforeKeys = beforeKeys;\n    _this._afterKeys = afterKeys;\n    _this._beforeComplete = beforeComplete;\n    _this._afterComplete = afterComplete;\n    _this._queryId = null;\n    _this._moreFunction = moreFunction;\n    _this._discardFunction = discardFunction;\n    _this._discard = false;\n    _this._fetchSize = fetchSize;\n\n    _this._setState(reactive ? _states.READY : _states.READY_STREAMING);\n\n    _this._setupAuoPull(fetchSize);\n\n    return _this;\n  }\n  /**\r\n   * Will be called on every record that comes in and transform a raw record\r\n   * to a Object. If user-provided observer is present, pass transformed record\r\n   * to it's onNext method, otherwise, push to record que.\r\n   * @param {Array} rawRecord - An array with the raw record\r\n   */\n\n\n  (0, _createClass2[\"default\"])(ResultStreamObserver, [{\n    key: \"onNext\",\n    value: function onNext(rawRecord) {\n      var record = new _record[\"default\"](this._fieldKeys, rawRecord, this._fieldLookup);\n\n      if (this._observers.some(function (o) {\n        return o.onNext;\n      })) {\n        this._observers.forEach(function (o) {\n          if (o.onNext) {\n            o.onNext(record);\n          }\n        });\n      } else {\n        this._queuedRecords.push(record);\n\n        if (this._queuedRecords.length > this._highRecordWatermark) {\n          this._autoPull = false;\n        }\n      }\n    }\n  }, {\n    key: \"onCompleted\",\n    value: function onCompleted(meta) {\n      this._state.onSuccess(this, meta);\n    }\n    /**\r\n     * Will be called on errors.\r\n     * If user-provided observer is present, pass the error\r\n     * to it's onError method, otherwise set instance variable _error.\r\n     * @param {Object} error - An error object\r\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(error) {\n      this._state.onError(this, error);\n    }\n    /**\r\n     * Cancel pending record stream\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this._discard = true;\n    }\n    /**\r\n     * Stream observer defaults to handling responses for two messages: RUN + PULL_ALL or RUN + DISCARD_ALL.\r\n     * Response for RUN initializes query keys. Response for PULL_ALL / DISCARD_ALL exposes the result stream.\r\n     *\r\n     * However, some operations can be represented as a single message which receives full metadata in a single response.\r\n     * For example, operations to begin, commit and rollback an explicit transaction use two messages in Bolt V1 but a single message in Bolt V3.\r\n     * Messages are `RUN \"BEGIN\" {}` + `PULL_ALL` in Bolt V1 and `BEGIN` in Bolt V3.\r\n     *\r\n     * This function prepares the observer to only handle a single response message.\r\n     */\n\n  }, {\n    key: \"prepareToHandleSingleResponse\",\n    value: function prepareToHandleSingleResponse() {\n      this._head = [];\n      this._fieldKeys = [];\n\n      this._setState(_states.STREAMING);\n    }\n    /**\r\n     * Mark this observer as if it has completed with no metadata.\r\n     */\n\n  }, {\n    key: \"markCompleted\",\n    value: function markCompleted() {\n      this._head = [];\n      this._fieldKeys = [];\n      this._tail = {};\n\n      this._setState(_states.SUCCEEDED);\n    }\n    /**\r\n     * Subscribe to events with provided observer.\r\n     * @param {Object} observer - Observer object\r\n     * @param {function(keys: String[])} observer.onKeys - Handle stream header, field keys.\r\n     * @param {function(record: Object)} observer.onNext - Handle records, one by one.\r\n     * @param {function(metadata: Object)} observer.onCompleted - Handle stream tail, the metadata.\r\n     * @param {function(error: Object)} observer.onError - Handle errors, should always be provided.\r\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      if (this._error) {\n        observer.onError(this._error);\n        return;\n      }\n\n      if (this._head && observer.onKeys) {\n        observer.onKeys(this._head);\n      }\n\n      if (this._queuedRecords.length > 0 && observer.onNext) {\n        for (var i = 0; i < this._queuedRecords.length; i++) {\n          observer.onNext(this._queuedRecords[i]);\n\n          if (this._queuedRecords.length - i - 1 <= this._lowRecordWatermark) {\n            this._autoPull = true;\n\n            if (this._state === _states.READY) {\n              this._handleStreaming();\n            }\n          }\n        }\n      }\n\n      if (this._tail && observer.onCompleted) {\n        observer.onCompleted(this._tail);\n      }\n\n      this._observers.push(observer);\n\n      if (this._state === _states.READY) {\n        this._handleStreaming();\n      }\n    }\n  }, {\n    key: \"_handleHasMore\",\n    value: function _handleHasMore(meta) {\n      // We've consumed current batch and server notified us that there're more\n      // records to stream. Let's invoke more or discard function based on whether\n      // the user wants to discard streaming or not\n      this._setState(_states.READY); // we've done streaming\n\n\n      this._handleStreaming();\n\n      delete meta.has_more;\n    }\n  }, {\n    key: \"_handlePullSuccess\",\n    value: function _handlePullSuccess(meta) {\n      var _this2 = this;\n\n      this._setState(_states.SUCCEEDED);\n\n      var completionMetadata = Object.assign(this._connection ? {\n        server: this._connection.server\n      } : {}, this._meta, meta);\n      var beforeHandlerResult = null;\n\n      if (this._beforeComplete) {\n        beforeHandlerResult = this._beforeComplete(completionMetadata);\n      }\n\n      var continuation = function continuation() {\n        // End of stream\n        _this2._tail = completionMetadata;\n\n        if (_this2._observers.some(function (o) {\n          return o.onCompleted;\n        })) {\n          _this2._observers.forEach(function (o) {\n            if (o.onCompleted) {\n              o.onCompleted(completionMetadata);\n            }\n          });\n        }\n\n        if (_this2._afterComplete) {\n          _this2._afterComplete(completionMetadata);\n        }\n      };\n\n      if (beforeHandlerResult) {\n        Promise.resolve(beforeHandlerResult).then(function () {\n          return continuation();\n        });\n      } else {\n        continuation();\n      }\n    }\n  }, {\n    key: \"_handleRunSuccess\",\n    value: function _handleRunSuccess(meta, afterSuccess) {\n      var _this3 = this;\n\n      if (this._fieldKeys === null) {\n        // Stream header, build a name->index field lookup table\n        // to be used by records. This is an optimization to make it\n        // faster to look up fields in a record by name, rather than by index.\n        // Since the records we get back via Bolt are just arrays of values.\n        this._fieldKeys = [];\n        this._fieldLookup = {};\n\n        if (meta.fields && meta.fields.length > 0) {\n          this._fieldKeys = meta.fields;\n\n          for (var i = 0; i < meta.fields.length; i++) {\n            this._fieldLookup[meta.fields[i]] = i;\n          } // remove fields key from metadata object\n\n\n          delete meta.fields;\n        } // Extract server generated query id for use in requestMore and discard\n        // functions\n\n\n        if (meta.qid) {\n          this._queryId = meta.qid; // remove qid from metadata object\n\n          delete meta.qid;\n        }\n\n        this._storeMetadataForCompletion(meta);\n\n        var beforeHandlerResult = null;\n\n        if (this._beforeKeys) {\n          beforeHandlerResult = this._beforeKeys(this._fieldKeys);\n        }\n\n        var continuation = function continuation() {\n          _this3._head = _this3._fieldKeys;\n\n          if (_this3._observers.some(function (o) {\n            return o.onKeys;\n          })) {\n            _this3._observers.forEach(function (o) {\n              if (o.onKeys) {\n                o.onKeys(_this3._fieldKeys);\n              }\n            });\n          }\n\n          if (_this3._afterKeys) {\n            _this3._afterKeys(_this3._fieldKeys);\n          }\n\n          afterSuccess();\n        };\n\n        if (beforeHandlerResult) {\n          Promise.resolve(beforeHandlerResult).then(function () {\n            return continuation();\n          });\n        } else {\n          continuation();\n        }\n      }\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(error) {\n      var _this4 = this;\n\n      this._setState(_states.FAILED);\n\n      this._error = error;\n      var beforeHandlerResult = null;\n\n      if (this._beforeError) {\n        beforeHandlerResult = this._beforeError(error);\n      }\n\n      var continuation = function continuation() {\n        if (_this4._observers.some(function (o) {\n          return o.onError;\n        })) {\n          _this4._observers.forEach(function (o) {\n            if (o.onError) {\n              o.onError(error);\n            }\n          });\n        }\n\n        if (_this4._afterError) {\n          _this4._afterError(error);\n        }\n      };\n\n      if (beforeHandlerResult) {\n        Promise.resolve(beforeHandlerResult).then(function () {\n          return continuation();\n        });\n      } else {\n        continuation();\n      }\n    }\n  }, {\n    key: \"_handleStreaming\",\n    value: function _handleStreaming() {\n      if (this._head && this._observers.some(function (o) {\n        return o.onNext || o.onCompleted;\n      })) {\n        if (this._discard) {\n          this._discardFunction(this._connection, this._queryId, this);\n\n          this._setState(_states.STREAMING);\n        } else if (this._autoPull) {\n          this._moreFunction(this._connection, this._queryId, this._fetchSize, this);\n\n          this._setState(_states.STREAMING);\n        }\n      }\n    }\n  }, {\n    key: \"_storeMetadataForCompletion\",\n    value: function _storeMetadataForCompletion(meta) {\n      var keys = Object.keys(meta);\n      var index = keys.length;\n      var key = '';\n\n      while (index--) {\n        key = keys[index];\n        this._meta[key] = meta[key];\n      }\n    }\n  }, {\n    key: \"_setState\",\n    value: function _setState(state) {\n      this._state = state;\n    }\n  }, {\n    key: \"_setupAuoPull\",\n    value: function _setupAuoPull(fetchSize) {\n      this._autoPull = true;\n\n      if (fetchSize === _requestMessage.ALL) {\n        this._lowRecordWatermark = Number.MAX_VALUE; // we shall always lower than this number to enable auto pull\n\n        this._highRecordWatermark = Number.MAX_VALUE; // we shall never reach this number to disable auto pull\n      } else {\n        this._lowRecordWatermark = 0.3 * fetchSize;\n        this._highRecordWatermark = 0.7 * fetchSize;\n      }\n    }\n  }]);\n  return ResultStreamObserver;\n}(StreamObserver);\n\nexports.ResultStreamObserver = ResultStreamObserver;\n\nvar LoginObserver = /*#__PURE__*/function (_StreamObserver2) {\n  (0, _inherits2[\"default\"])(LoginObserver, _StreamObserver2);\n  /**\r\n   *\r\n   * @param {Object} param -\r\n   * @param {Connection} param.connection\r\n   * @param {function(err: Error)} param.beforeError\r\n   * @param {function(err: Error)} param.afterError\r\n   * @param {function(metadata)} param.beforeComplete\r\n   * @param {function(metadata)} param.afterComplete\r\n   */\n\n  function LoginObserver() {\n    var _this5;\n\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        connection = _ref2.connection,\n        beforeError = _ref2.beforeError,\n        afterError = _ref2.afterError,\n        beforeComplete = _ref2.beforeComplete,\n        afterComplete = _ref2.afterComplete;\n\n    (0, _classCallCheck2[\"default\"])(this, LoginObserver);\n    _this5 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(LoginObserver).call(this));\n    _this5._connection = connection;\n    _this5._beforeError = beforeError;\n    _this5._afterError = afterError;\n    _this5._beforeComplete = beforeComplete;\n    _this5._afterComplete = afterComplete;\n    return _this5;\n  }\n\n  (0, _createClass2[\"default\"])(LoginObserver, [{\n    key: \"onNext\",\n    value: function onNext(record) {\n      this.onError((0, _error.newError)('Received RECORD when initializing ' + JSON.stringify(record)));\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(error) {\n      if (this._beforeError) {\n        this._beforeError(error);\n      }\n\n      this._connection._updateCurrentObserver(); // make sure this exact observer will not be called again\n\n\n      this._connection._handleFatalError(error); // initialization errors are fatal\n\n\n      if (this._afterError) {\n        this._afterError(error);\n      }\n    }\n  }, {\n    key: \"onCompleted\",\n    value: function onCompleted(metadata) {\n      if (this._beforeComplete) {\n        this._beforeComplete(metadata);\n      }\n\n      if (metadata) {\n        // read server version from the response metadata, if it is available\n        var serverVersion = metadata.server;\n\n        if (!this._connection.version) {\n          this._connection.version = serverVersion;\n        } // read database connection id from the response metadata, if it is available\n\n\n        var dbConnectionId = metadata.connection_id;\n\n        if (!this._connection.databaseId) {\n          this._connection.databaseId = dbConnectionId;\n        }\n      }\n\n      if (this._afterComplete) {\n        this._afterComplete(metadata);\n      }\n    }\n  }]);\n  return LoginObserver;\n}(StreamObserver);\n\nexports.LoginObserver = LoginObserver;\n\nvar ResetObserver = /*#__PURE__*/function (_StreamObserver3) {\n  (0, _inherits2[\"default\"])(ResetObserver, _StreamObserver3);\n  /**\r\n   *\r\n   * @param {Object} param -\r\n   * @param {Connection} param.connection\r\n   * @param {function(err: Error)} param.onError\r\n   * @param {function(metadata)} param.onComplete\r\n   */\n\n  function ResetObserver() {\n    var _this6;\n\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        connection = _ref3.connection,\n        onError = _ref3.onError,\n        onComplete = _ref3.onComplete;\n\n    (0, _classCallCheck2[\"default\"])(this, ResetObserver);\n    _this6 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ResetObserver).call(this));\n    _this6._connection = connection;\n    _this6._onError = onError;\n    _this6._onComplete = onComplete;\n    return _this6;\n  }\n\n  (0, _createClass2[\"default\"])(ResetObserver, [{\n    key: \"onNext\",\n    value: function onNext(record) {\n      this.onError((0, _error.newError)('Received RECORD when resetting: received record is: ' + JSON.stringify(record), _error.PROTOCOL_ERROR));\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(error) {\n      if (error.code === _error.PROTOCOL_ERROR) {\n        this._connection._handleProtocolError(error.message);\n      }\n\n      if (this._onError) {\n        this._onError(error);\n      }\n    }\n  }, {\n    key: \"onCompleted\",\n    value: function onCompleted(metadata) {\n      if (this._onComplete) {\n        this._onComplete(metadata);\n      }\n    }\n  }]);\n  return ResetObserver;\n}(StreamObserver);\n\nexports.ResetObserver = ResetObserver;\n\nvar FailedObserver = /*#__PURE__*/function (_ResultStreamObserver) {\n  (0, _inherits2[\"default\"])(FailedObserver, _ResultStreamObserver);\n\n  function FailedObserver(_ref4) {\n    var _this7;\n\n    var error = _ref4.error,\n        onError = _ref4.onError;\n    (0, _classCallCheck2[\"default\"])(this, FailedObserver);\n    _this7 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(FailedObserver).call(this, {\n      beforeError: onError\n    }));\n\n    _this7.onError(error);\n\n    return _this7;\n  }\n\n  return FailedObserver;\n}(ResultStreamObserver);\n\nexports.FailedObserver = FailedObserver;\n\nvar CompletedObserver = /*#__PURE__*/function (_ResultStreamObserver2) {\n  (0, _inherits2[\"default\"])(CompletedObserver, _ResultStreamObserver2);\n\n  function CompletedObserver() {\n    var _this8;\n\n    (0, _classCallCheck2[\"default\"])(this, CompletedObserver);\n    _this8 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(CompletedObserver).call(this));\n    (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(CompletedObserver.prototype), \"markCompleted\", (0, _assertThisInitialized2[\"default\"])(_this8)).call((0, _assertThisInitialized2[\"default\"])(_this8));\n    return _this8;\n  }\n\n  return CompletedObserver;\n}(ResultStreamObserver);\n\nexports.CompletedObserver = CompletedObserver;\nvar _states = {\n  READY_STREAMING: {\n    // async start state\n    onSuccess: function onSuccess(streamObserver, meta) {\n      streamObserver._handleRunSuccess(meta, function () {\n        streamObserver._setState(_states.STREAMING);\n      } // after run succeeded, async directly move to streaming\n      // state\n      );\n    },\n    onError: function onError(streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function name() {\n      return 'READY_STREAMING';\n    }\n  },\n  READY: {\n    // reactive start state\n    onSuccess: function onSuccess(streamObserver, meta) {\n      streamObserver._handleRunSuccess(meta, function () {\n        return streamObserver._handleStreaming();\n      } // after run succeeded received, reactive shall start pulling\n      );\n    },\n    onError: function onError(streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function name() {\n      return 'READY';\n    }\n  },\n  STREAMING: {\n    onSuccess: function onSuccess(streamObserver, meta) {\n      if (meta.has_more) {\n        streamObserver._handleHasMore(meta);\n      } else {\n        streamObserver._handlePullSuccess(meta);\n      }\n    },\n    onError: function onError(streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function name() {\n      return 'STREAMING';\n    }\n  },\n  FAILED: {\n    onError: function onError(error) {// more errors are ignored\n    },\n    name: function name() {\n      return 'FAILED';\n    }\n  },\n  SUCCEEDED: {\n    name: function name() {\n      return 'SUCCEEDED';\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/internal/stream-observers.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","CompletedObserver","FailedObserver","ResetObserver","LoginObserver","ResultStreamObserver","StreamObserver","_assertThisInitialized2","_get2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_classCallCheck2","_createClass2","_record","_connection","_error","_integer","_requestMessage","key","onNext","rawRecord","onError","error","onCompleted","meta","_StreamObserver","_this","_ref","arguments","length","undefined","connection","_ref$reactive","reactive","moreFunction","discardFunction","_ref$fetchSize","fetchSize","ALL","beforeError","afterError","beforeKeys","afterKeys","beforeComplete","afterComplete","call","_fieldKeys","_fieldLookup","_head","_queuedRecords","_tail","_observers","_meta","_beforeError","_afterError","_beforeKeys","_afterKeys","_beforeComplete","_afterComplete","_queryId","_moreFunction","_discardFunction","_discard","_fetchSize","_setState","_states","READY","READY_STREAMING","_setupAuoPull","record","some","o","forEach","push","_highRecordWatermark","_autoPull","_state","onSuccess","cancel","prepareToHandleSingleResponse","STREAMING","markCompleted","SUCCEEDED","subscribe","observer","onKeys","i","_lowRecordWatermark","_handleStreaming","_handleHasMore","has_more","_handlePullSuccess","_this2","completionMetadata","assign","server","beforeHandlerResult","continuation","Promise","resolve","then","_handleRunSuccess","afterSuccess","_this3","fields","qid","_storeMetadataForCompletion","_handleError","_this4","FAILED","keys","index","state","Number","MAX_VALUE","_StreamObserver2","_this5","_ref2","newError","JSON","stringify","_updateCurrentObserver","_handleFatalError","metadata","serverVersion","version","dbConnectionId","connection_id","databaseId","_StreamObserver3","_this6","_ref3","onComplete","_onError","_onComplete","PROTOCOL_ERROR","code","_handleProtocolError","message","_ResultStreamObserver","_ref4","_this7","_ResultStreamObserver2","_this8","prototype","streamObserver","name"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.CompletedObserver = exports.FailedObserver = exports.ResetObserver = exports.LoginObserver = exports.ResultStreamObserver = exports.StreamObserver = void 0;\r\n\r\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\r\n\r\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\r\n\r\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\r\n\r\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\r\n\r\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\r\n\r\nvar _record = _interopRequireDefault(require(\"../record\"));\r\n\r\nvar _connection = _interopRequireDefault(require(\"./connection\"));\r\n\r\nvar _error = require(\"../error\");\r\n\r\nvar _integer = _interopRequireDefault(require(\"../integer\"));\r\n\r\nvar _requestMessage = require(\"./request-message\");\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StreamObserver =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function StreamObserver() {\r\n    (0, _classCallCheck2[\"default\"])(this, StreamObserver);\r\n  }\r\n\r\n  (0, _createClass2[\"default\"])(StreamObserver, [{\r\n    key: \"onNext\",\r\n    value: function onNext(rawRecord) {}\r\n  }, {\r\n    key: \"onError\",\r\n    value: function onError(error) {}\r\n  }, {\r\n    key: \"onCompleted\",\r\n    value: function onCompleted(meta) {}\r\n  }]);\r\n  return StreamObserver;\r\n}();\r\n/**\r\n * Handles a RUN/PULL_ALL, or RUN/DISCARD_ALL requests, maps the responses\r\n * in a way that a user-provided observer can see these as a clean Stream\r\n * of records.\r\n * This class will queue up incoming messages until a user-provided observer\r\n * for the incoming stream is registered. Thus, we keep fields around\r\n * for tracking head/records/tail. These are only used if there is no\r\n * observer registered.\r\n * @access private\r\n */\r\n\r\n\r\nexports.StreamObserver = StreamObserver;\r\n\r\nvar ResultStreamObserver =\r\n/*#__PURE__*/\r\nfunction (_StreamObserver) {\r\n  (0, _inherits2[\"default\"])(ResultStreamObserver, _StreamObserver);\r\n\r\n  /**\r\n   *\r\n   * @param {Object} param\r\n   * @param {Connection} param.connection\r\n   * @param {boolean} param.reactive\r\n   * @param {function(connection: Connection, stmtId: number|Integer, n: number|Integer, observer: StreamObserver)} param.moreFunction -\r\n   * @param {function(connection: Connection, stmtId: number|Integer, observer: StreamObserver)} param.discardFunction -\r\n   * @param {number|Integer} param.fetchSize -\r\n   * @param {function(err: Error): Promise|void} param.beforeError -\r\n   * @param {function(err: Error): Promise|void} param.afterError -\r\n   * @param {function(keys: string[]): Promise|void} param.beforeKeys -\r\n   * @param {function(keys: string[]): Promise|void} param.afterKeys -\r\n   * @param {function(metadata: Object): Promise|void} param.beforeComplete -\r\n   * @param {function(metadata: Object): Promise|void} param.afterComplete -\r\n   */\r\n  function ResultStreamObserver() {\r\n    var _this;\r\n\r\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n        connection = _ref.connection,\r\n        _ref$reactive = _ref.reactive,\r\n        reactive = _ref$reactive === void 0 ? false : _ref$reactive,\r\n        moreFunction = _ref.moreFunction,\r\n        discardFunction = _ref.discardFunction,\r\n        _ref$fetchSize = _ref.fetchSize,\r\n        fetchSize = _ref$fetchSize === void 0 ? _requestMessage.ALL : _ref$fetchSize,\r\n        beforeError = _ref.beforeError,\r\n        afterError = _ref.afterError,\r\n        beforeKeys = _ref.beforeKeys,\r\n        afterKeys = _ref.afterKeys,\r\n        beforeComplete = _ref.beforeComplete,\r\n        afterComplete = _ref.afterComplete;\r\n\r\n    (0, _classCallCheck2[\"default\"])(this, ResultStreamObserver);\r\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ResultStreamObserver).call(this));\r\n    _this._connection = connection;\r\n    _this._fieldKeys = null;\r\n    _this._fieldLookup = null;\r\n    _this._head = null;\r\n    _this._queuedRecords = [];\r\n    _this._tail = null;\r\n    _this._error = null;\r\n    _this._observers = [];\r\n    _this._meta = {};\r\n    _this._beforeError = beforeError;\r\n    _this._afterError = afterError;\r\n    _this._beforeKeys = beforeKeys;\r\n    _this._afterKeys = afterKeys;\r\n    _this._beforeComplete = beforeComplete;\r\n    _this._afterComplete = afterComplete;\r\n    _this._queryId = null;\r\n    _this._moreFunction = moreFunction;\r\n    _this._discardFunction = discardFunction;\r\n    _this._discard = false;\r\n    _this._fetchSize = fetchSize;\r\n\r\n    _this._setState(reactive ? _states.READY : _states.READY_STREAMING);\r\n\r\n    _this._setupAuoPull(fetchSize);\r\n\r\n    return _this;\r\n  }\r\n  /**\r\n   * Will be called on every record that comes in and transform a raw record\r\n   * to a Object. If user-provided observer is present, pass transformed record\r\n   * to it's onNext method, otherwise, push to record que.\r\n   * @param {Array} rawRecord - An array with the raw record\r\n   */\r\n\r\n\r\n  (0, _createClass2[\"default\"])(ResultStreamObserver, [{\r\n    key: \"onNext\",\r\n    value: function onNext(rawRecord) {\r\n      var record = new _record[\"default\"](this._fieldKeys, rawRecord, this._fieldLookup);\r\n\r\n      if (this._observers.some(function (o) {\r\n        return o.onNext;\r\n      })) {\r\n        this._observers.forEach(function (o) {\r\n          if (o.onNext) {\r\n            o.onNext(record);\r\n          }\r\n        });\r\n      } else {\r\n        this._queuedRecords.push(record);\r\n\r\n        if (this._queuedRecords.length > this._highRecordWatermark) {\r\n          this._autoPull = false;\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"onCompleted\",\r\n    value: function onCompleted(meta) {\r\n      this._state.onSuccess(this, meta);\r\n    }\r\n    /**\r\n     * Will be called on errors.\r\n     * If user-provided observer is present, pass the error\r\n     * to it's onError method, otherwise set instance variable _error.\r\n     * @param {Object} error - An error object\r\n     */\r\n\r\n  }, {\r\n    key: \"onError\",\r\n    value: function onError(error) {\r\n      this._state.onError(this, error);\r\n    }\r\n    /**\r\n     * Cancel pending record stream\r\n     */\r\n\r\n  }, {\r\n    key: \"cancel\",\r\n    value: function cancel() {\r\n      this._discard = true;\r\n    }\r\n    /**\r\n     * Stream observer defaults to handling responses for two messages: RUN + PULL_ALL or RUN + DISCARD_ALL.\r\n     * Response for RUN initializes query keys. Response for PULL_ALL / DISCARD_ALL exposes the result stream.\r\n     *\r\n     * However, some operations can be represented as a single message which receives full metadata in a single response.\r\n     * For example, operations to begin, commit and rollback an explicit transaction use two messages in Bolt V1 but a single message in Bolt V3.\r\n     * Messages are `RUN \"BEGIN\" {}` + `PULL_ALL` in Bolt V1 and `BEGIN` in Bolt V3.\r\n     *\r\n     * This function prepares the observer to only handle a single response message.\r\n     */\r\n\r\n  }, {\r\n    key: \"prepareToHandleSingleResponse\",\r\n    value: function prepareToHandleSingleResponse() {\r\n      this._head = [];\r\n      this._fieldKeys = [];\r\n\r\n      this._setState(_states.STREAMING);\r\n    }\r\n    /**\r\n     * Mark this observer as if it has completed with no metadata.\r\n     */\r\n\r\n  }, {\r\n    key: \"markCompleted\",\r\n    value: function markCompleted() {\r\n      this._head = [];\r\n      this._fieldKeys = [];\r\n      this._tail = {};\r\n\r\n      this._setState(_states.SUCCEEDED);\r\n    }\r\n    /**\r\n     * Subscribe to events with provided observer.\r\n     * @param {Object} observer - Observer object\r\n     * @param {function(keys: String[])} observer.onKeys - Handle stream header, field keys.\r\n     * @param {function(record: Object)} observer.onNext - Handle records, one by one.\r\n     * @param {function(metadata: Object)} observer.onCompleted - Handle stream tail, the metadata.\r\n     * @param {function(error: Object)} observer.onError - Handle errors, should always be provided.\r\n     */\r\n\r\n  }, {\r\n    key: \"subscribe\",\r\n    value: function subscribe(observer) {\r\n      if (this._error) {\r\n        observer.onError(this._error);\r\n        return;\r\n      }\r\n\r\n      if (this._head && observer.onKeys) {\r\n        observer.onKeys(this._head);\r\n      }\r\n\r\n      if (this._queuedRecords.length > 0 && observer.onNext) {\r\n        for (var i = 0; i < this._queuedRecords.length; i++) {\r\n          observer.onNext(this._queuedRecords[i]);\r\n\r\n          if (this._queuedRecords.length - i - 1 <= this._lowRecordWatermark) {\r\n            this._autoPull = true;\r\n\r\n            if (this._state === _states.READY) {\r\n              this._handleStreaming();\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this._tail && observer.onCompleted) {\r\n        observer.onCompleted(this._tail);\r\n      }\r\n\r\n      this._observers.push(observer);\r\n\r\n      if (this._state === _states.READY) {\r\n        this._handleStreaming();\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_handleHasMore\",\r\n    value: function _handleHasMore(meta) {\r\n      // We've consumed current batch and server notified us that there're more\r\n      // records to stream. Let's invoke more or discard function based on whether\r\n      // the user wants to discard streaming or not\r\n      this._setState(_states.READY); // we've done streaming\r\n\r\n\r\n      this._handleStreaming();\r\n\r\n      delete meta.has_more;\r\n    }\r\n  }, {\r\n    key: \"_handlePullSuccess\",\r\n    value: function _handlePullSuccess(meta) {\r\n      var _this2 = this;\r\n\r\n      this._setState(_states.SUCCEEDED);\r\n\r\n      var completionMetadata = Object.assign(this._connection ? {\r\n        server: this._connection.server\r\n      } : {}, this._meta, meta);\r\n      var beforeHandlerResult = null;\r\n\r\n      if (this._beforeComplete) {\r\n        beforeHandlerResult = this._beforeComplete(completionMetadata);\r\n      }\r\n\r\n      var continuation = function continuation() {\r\n        // End of stream\r\n        _this2._tail = completionMetadata;\r\n\r\n        if (_this2._observers.some(function (o) {\r\n          return o.onCompleted;\r\n        })) {\r\n          _this2._observers.forEach(function (o) {\r\n            if (o.onCompleted) {\r\n              o.onCompleted(completionMetadata);\r\n            }\r\n          });\r\n        }\r\n\r\n        if (_this2._afterComplete) {\r\n          _this2._afterComplete(completionMetadata);\r\n        }\r\n      };\r\n\r\n      if (beforeHandlerResult) {\r\n        Promise.resolve(beforeHandlerResult).then(function () {\r\n          return continuation();\r\n        });\r\n      } else {\r\n        continuation();\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_handleRunSuccess\",\r\n    value: function _handleRunSuccess(meta, afterSuccess) {\r\n      var _this3 = this;\r\n\r\n      if (this._fieldKeys === null) {\r\n        // Stream header, build a name->index field lookup table\r\n        // to be used by records. This is an optimization to make it\r\n        // faster to look up fields in a record by name, rather than by index.\r\n        // Since the records we get back via Bolt are just arrays of values.\r\n        this._fieldKeys = [];\r\n        this._fieldLookup = {};\r\n\r\n        if (meta.fields && meta.fields.length > 0) {\r\n          this._fieldKeys = meta.fields;\r\n\r\n          for (var i = 0; i < meta.fields.length; i++) {\r\n            this._fieldLookup[meta.fields[i]] = i;\r\n          } // remove fields key from metadata object\r\n\r\n\r\n          delete meta.fields;\r\n        } // Extract server generated query id for use in requestMore and discard\r\n        // functions\r\n\r\n\r\n        if (meta.qid) {\r\n          this._queryId = meta.qid; // remove qid from metadata object\r\n\r\n          delete meta.qid;\r\n        }\r\n\r\n        this._storeMetadataForCompletion(meta);\r\n\r\n        var beforeHandlerResult = null;\r\n\r\n        if (this._beforeKeys) {\r\n          beforeHandlerResult = this._beforeKeys(this._fieldKeys);\r\n        }\r\n\r\n        var continuation = function continuation() {\r\n          _this3._head = _this3._fieldKeys;\r\n\r\n          if (_this3._observers.some(function (o) {\r\n            return o.onKeys;\r\n          })) {\r\n            _this3._observers.forEach(function (o) {\r\n              if (o.onKeys) {\r\n                o.onKeys(_this3._fieldKeys);\r\n              }\r\n            });\r\n          }\r\n\r\n          if (_this3._afterKeys) {\r\n            _this3._afterKeys(_this3._fieldKeys);\r\n          }\r\n\r\n          afterSuccess();\r\n        };\r\n\r\n        if (beforeHandlerResult) {\r\n          Promise.resolve(beforeHandlerResult).then(function () {\r\n            return continuation();\r\n          });\r\n        } else {\r\n          continuation();\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_handleError\",\r\n    value: function _handleError(error) {\r\n      var _this4 = this;\r\n\r\n      this._setState(_states.FAILED);\r\n\r\n      this._error = error;\r\n      var beforeHandlerResult = null;\r\n\r\n      if (this._beforeError) {\r\n        beforeHandlerResult = this._beforeError(error);\r\n      }\r\n\r\n      var continuation = function continuation() {\r\n        if (_this4._observers.some(function (o) {\r\n          return o.onError;\r\n        })) {\r\n          _this4._observers.forEach(function (o) {\r\n            if (o.onError) {\r\n              o.onError(error);\r\n            }\r\n          });\r\n        }\r\n\r\n        if (_this4._afterError) {\r\n          _this4._afterError(error);\r\n        }\r\n      };\r\n\r\n      if (beforeHandlerResult) {\r\n        Promise.resolve(beforeHandlerResult).then(function () {\r\n          return continuation();\r\n        });\r\n      } else {\r\n        continuation();\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_handleStreaming\",\r\n    value: function _handleStreaming() {\r\n      if (this._head && this._observers.some(function (o) {\r\n        return o.onNext || o.onCompleted;\r\n      })) {\r\n        if (this._discard) {\r\n          this._discardFunction(this._connection, this._queryId, this);\r\n\r\n          this._setState(_states.STREAMING);\r\n        } else if (this._autoPull) {\r\n          this._moreFunction(this._connection, this._queryId, this._fetchSize, this);\r\n\r\n          this._setState(_states.STREAMING);\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_storeMetadataForCompletion\",\r\n    value: function _storeMetadataForCompletion(meta) {\r\n      var keys = Object.keys(meta);\r\n      var index = keys.length;\r\n      var key = '';\r\n\r\n      while (index--) {\r\n        key = keys[index];\r\n        this._meta[key] = meta[key];\r\n      }\r\n    }\r\n  }, {\r\n    key: \"_setState\",\r\n    value: function _setState(state) {\r\n      this._state = state;\r\n    }\r\n  }, {\r\n    key: \"_setupAuoPull\",\r\n    value: function _setupAuoPull(fetchSize) {\r\n      this._autoPull = true;\r\n\r\n      if (fetchSize === _requestMessage.ALL) {\r\n        this._lowRecordWatermark = Number.MAX_VALUE; // we shall always lower than this number to enable auto pull\r\n\r\n        this._highRecordWatermark = Number.MAX_VALUE; // we shall never reach this number to disable auto pull\r\n      } else {\r\n        this._lowRecordWatermark = 0.3 * fetchSize;\r\n        this._highRecordWatermark = 0.7 * fetchSize;\r\n      }\r\n    }\r\n  }]);\r\n  return ResultStreamObserver;\r\n}(StreamObserver);\r\n\r\nexports.ResultStreamObserver = ResultStreamObserver;\r\n\r\nvar LoginObserver =\r\n/*#__PURE__*/\r\nfunction (_StreamObserver2) {\r\n  (0, _inherits2[\"default\"])(LoginObserver, _StreamObserver2);\r\n\r\n  /**\r\n   *\r\n   * @param {Object} param -\r\n   * @param {Connection} param.connection\r\n   * @param {function(err: Error)} param.beforeError\r\n   * @param {function(err: Error)} param.afterError\r\n   * @param {function(metadata)} param.beforeComplete\r\n   * @param {function(metadata)} param.afterComplete\r\n   */\r\n  function LoginObserver() {\r\n    var _this5;\r\n\r\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n        connection = _ref2.connection,\r\n        beforeError = _ref2.beforeError,\r\n        afterError = _ref2.afterError,\r\n        beforeComplete = _ref2.beforeComplete,\r\n        afterComplete = _ref2.afterComplete;\r\n\r\n    (0, _classCallCheck2[\"default\"])(this, LoginObserver);\r\n    _this5 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(LoginObserver).call(this));\r\n    _this5._connection = connection;\r\n    _this5._beforeError = beforeError;\r\n    _this5._afterError = afterError;\r\n    _this5._beforeComplete = beforeComplete;\r\n    _this5._afterComplete = afterComplete;\r\n    return _this5;\r\n  }\r\n\r\n  (0, _createClass2[\"default\"])(LoginObserver, [{\r\n    key: \"onNext\",\r\n    value: function onNext(record) {\r\n      this.onError((0, _error.newError)('Received RECORD when initializing ' + JSON.stringify(record)));\r\n    }\r\n  }, {\r\n    key: \"onError\",\r\n    value: function onError(error) {\r\n      if (this._beforeError) {\r\n        this._beforeError(error);\r\n      }\r\n\r\n      this._connection._updateCurrentObserver(); // make sure this exact observer will not be called again\r\n\r\n\r\n      this._connection._handleFatalError(error); // initialization errors are fatal\r\n\r\n\r\n      if (this._afterError) {\r\n        this._afterError(error);\r\n      }\r\n    }\r\n  }, {\r\n    key: \"onCompleted\",\r\n    value: function onCompleted(metadata) {\r\n      if (this._beforeComplete) {\r\n        this._beforeComplete(metadata);\r\n      }\r\n\r\n      if (metadata) {\r\n        // read server version from the response metadata, if it is available\r\n        var serverVersion = metadata.server;\r\n\r\n        if (!this._connection.version) {\r\n          this._connection.version = serverVersion;\r\n        } // read database connection id from the response metadata, if it is available\r\n\r\n\r\n        var dbConnectionId = metadata.connection_id;\r\n\r\n        if (!this._connection.databaseId) {\r\n          this._connection.databaseId = dbConnectionId;\r\n        }\r\n      }\r\n\r\n      if (this._afterComplete) {\r\n        this._afterComplete(metadata);\r\n      }\r\n    }\r\n  }]);\r\n  return LoginObserver;\r\n}(StreamObserver);\r\n\r\nexports.LoginObserver = LoginObserver;\r\n\r\nvar ResetObserver =\r\n/*#__PURE__*/\r\nfunction (_StreamObserver3) {\r\n  (0, _inherits2[\"default\"])(ResetObserver, _StreamObserver3);\r\n\r\n  /**\r\n   *\r\n   * @param {Object} param -\r\n   * @param {Connection} param.connection\r\n   * @param {function(err: Error)} param.onError\r\n   * @param {function(metadata)} param.onComplete\r\n   */\r\n  function ResetObserver() {\r\n    var _this6;\r\n\r\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\r\n        connection = _ref3.connection,\r\n        onError = _ref3.onError,\r\n        onComplete = _ref3.onComplete;\r\n\r\n    (0, _classCallCheck2[\"default\"])(this, ResetObserver);\r\n    _this6 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ResetObserver).call(this));\r\n    _this6._connection = connection;\r\n    _this6._onError = onError;\r\n    _this6._onComplete = onComplete;\r\n    return _this6;\r\n  }\r\n\r\n  (0, _createClass2[\"default\"])(ResetObserver, [{\r\n    key: \"onNext\",\r\n    value: function onNext(record) {\r\n      this.onError((0, _error.newError)('Received RECORD when resetting: received record is: ' + JSON.stringify(record), _error.PROTOCOL_ERROR));\r\n    }\r\n  }, {\r\n    key: \"onError\",\r\n    value: function onError(error) {\r\n      if (error.code === _error.PROTOCOL_ERROR) {\r\n        this._connection._handleProtocolError(error.message);\r\n      }\r\n\r\n      if (this._onError) {\r\n        this._onError(error);\r\n      }\r\n    }\r\n  }, {\r\n    key: \"onCompleted\",\r\n    value: function onCompleted(metadata) {\r\n      if (this._onComplete) {\r\n        this._onComplete(metadata);\r\n      }\r\n    }\r\n  }]);\r\n  return ResetObserver;\r\n}(StreamObserver);\r\n\r\nexports.ResetObserver = ResetObserver;\r\n\r\nvar FailedObserver =\r\n/*#__PURE__*/\r\nfunction (_ResultStreamObserver) {\r\n  (0, _inherits2[\"default\"])(FailedObserver, _ResultStreamObserver);\r\n\r\n  function FailedObserver(_ref4) {\r\n    var _this7;\r\n\r\n    var error = _ref4.error,\r\n        onError = _ref4.onError;\r\n    (0, _classCallCheck2[\"default\"])(this, FailedObserver);\r\n    _this7 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(FailedObserver).call(this, {\r\n      beforeError: onError\r\n    }));\r\n\r\n    _this7.onError(error);\r\n\r\n    return _this7;\r\n  }\r\n\r\n  return FailedObserver;\r\n}(ResultStreamObserver);\r\n\r\nexports.FailedObserver = FailedObserver;\r\n\r\nvar CompletedObserver =\r\n/*#__PURE__*/\r\nfunction (_ResultStreamObserver2) {\r\n  (0, _inherits2[\"default\"])(CompletedObserver, _ResultStreamObserver2);\r\n\r\n  function CompletedObserver() {\r\n    var _this8;\r\n\r\n    (0, _classCallCheck2[\"default\"])(this, CompletedObserver);\r\n    _this8 = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(CompletedObserver).call(this));\r\n    (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(CompletedObserver.prototype), \"markCompleted\", (0, _assertThisInitialized2[\"default\"])(_this8)).call((0, _assertThisInitialized2[\"default\"])(_this8));\r\n    return _this8;\r\n  }\r\n\r\n  return CompletedObserver;\r\n}(ResultStreamObserver);\r\n\r\nexports.CompletedObserver = CompletedObserver;\r\nvar _states = {\r\n  READY_STREAMING: {\r\n    // async start state\r\n    onSuccess: function onSuccess(streamObserver, meta) {\r\n      streamObserver._handleRunSuccess(meta, function () {\r\n        streamObserver._setState(_states.STREAMING);\r\n      } // after run succeeded, async directly move to streaming\r\n      // state\r\n      );\r\n    },\r\n    onError: function onError(streamObserver, error) {\r\n      streamObserver._handleError(error);\r\n    },\r\n    name: function name() {\r\n      return 'READY_STREAMING';\r\n    }\r\n  },\r\n  READY: {\r\n    // reactive start state\r\n    onSuccess: function onSuccess(streamObserver, meta) {\r\n      streamObserver._handleRunSuccess(meta, function () {\r\n        return streamObserver._handleStreaming();\r\n      } // after run succeeded received, reactive shall start pulling\r\n      );\r\n    },\r\n    onError: function onError(streamObserver, error) {\r\n      streamObserver._handleError(error);\r\n    },\r\n    name: function name() {\r\n      return 'READY';\r\n    }\r\n  },\r\n  STREAMING: {\r\n    onSuccess: function onSuccess(streamObserver, meta) {\r\n      if (meta.has_more) {\r\n        streamObserver._handleHasMore(meta);\r\n      } else {\r\n        streamObserver._handlePullSuccess(meta);\r\n      }\r\n    },\r\n    onError: function onError(streamObserver, error) {\r\n      streamObserver._handleError(error);\r\n    },\r\n    name: function name() {\r\n      return 'STREAMING';\r\n    }\r\n  },\r\n  FAILED: {\r\n    onError: function onError(error) {// more errors are ignored\r\n    },\r\n    name: function name() {\r\n      return 'FAILED';\r\n    }\r\n  },\r\n  SUCCEEDED: {\r\n    name: function name() {\r\n      return 'SUCCEEDED';\r\n    }\r\n  }\r\n};"]},"metadata":{},"sourceType":"script"}