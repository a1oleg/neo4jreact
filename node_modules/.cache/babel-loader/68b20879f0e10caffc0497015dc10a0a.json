{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeSecondsForDuration = normalizeSecondsForDuration;\nexports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;\nexports.localTimeToNanoOfDay = localTimeToNanoOfDay;\nexports.nanoOfDayToLocalTime = nanoOfDayToLocalTime;\nexports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;\nexports.epochSecondAndNanoToLocalDateTime = epochSecondAndNanoToLocalDateTime;\nexports.dateToEpochDay = dateToEpochDay;\nexports.epochDayToDate = epochDayToDate;\nexports.durationToIsoString = durationToIsoString;\nexports.timeToIsoString = timeToIsoString;\nexports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;\nexports.dateToIsoString = dateToIsoString;\nexports.totalNanoseconds = totalNanoseconds;\nexports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;\nexports.assertValidYear = assertValidYear;\nexports.assertValidMonth = assertValidMonth;\nexports.assertValidDay = assertValidDay;\nexports.assertValidHour = assertValidHour;\nexports.assertValidMinute = assertValidMinute;\nexports.assertValidSecond = assertValidSecond;\nexports.assertValidNanosecond = assertValidNanosecond;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _integer = require(\"../integer\");\n\nvar _temporalTypes = require(\"../temporal-types\");\n\nvar _util = require(\"./util\");\n\nvar _error = require(\"../error\");\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/*\r\n  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.\r\n\r\n  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived\r\n  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere\r\n  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.\r\n\r\n  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the\r\n  conversion functions.\r\n */\n\n\nvar ValueRange = /*#__PURE__*/function () {\n  function ValueRange(min, max) {\n    (0, _classCallCheck2[\"default\"])(this, ValueRange);\n    this._minNumber = min;\n    this._maxNumber = max;\n    this._minInteger = (0, _integer[\"int\"])(min);\n    this._maxInteger = (0, _integer[\"int\"])(max);\n  }\n\n  (0, _createClass2[\"default\"])(ValueRange, [{\n    key: \"contains\",\n    value: function contains(value) {\n      if ((0, _integer.isInt)(value)) {\n        return value.greaterThanOrEqual(this._minInteger) && value.lessThanOrEqual(this._maxInteger);\n      } else {\n        return value >= this._minNumber && value <= this._maxNumber;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(this._minNumber, \", \").concat(this._maxNumber, \"]\");\n    }\n  }]);\n  return ValueRange;\n}();\n\nvar YEAR_RANGE = new ValueRange(-999999999, 999999999);\nvar MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);\nvar DAY_OF_MONTH_RANGE = new ValueRange(1, 31);\nvar HOUR_OF_DAY_RANGE = new ValueRange(0, 23);\nvar MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);\nvar SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);\nvar NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);\nvar MINUTES_PER_HOUR = 60;\nvar SECONDS_PER_MINUTE = 60;\nvar SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;\nvar NANOS_PER_SECOND = 1000000000;\nvar NANOS_PER_MILLISECOND = 1000000;\nvar NANOS_PER_MINUTE = NANOS_PER_SECOND * SECONDS_PER_MINUTE;\nvar NANOS_PER_HOUR = NANOS_PER_MINUTE * MINUTES_PER_HOUR;\nvar DAYS_0000_TO_1970 = 719528;\nvar DAYS_PER_400_YEAR_CYCLE = 146097;\nvar SECONDS_PER_DAY = 86400;\n\nfunction normalizeSecondsForDuration(seconds, nanoseconds) {\n  return (0, _integer[\"int\"])(seconds).add(floorDiv(nanoseconds, NANOS_PER_SECOND));\n}\n\nfunction normalizeNanosecondsForDuration(nanoseconds) {\n  return floorMod(nanoseconds, NANOS_PER_SECOND);\n}\n/**\r\n * Converts given local time into a single integer representing this same time in nanoseconds of the day.\r\n * @param {Integer|number|string} hour the hour of the local time to convert.\r\n * @param {Integer|number|string} minute the minute of the local time to convert.\r\n * @param {Integer|number|string} second the second of the local time to convert.\r\n * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.\r\n * @return {Integer} nanoseconds representing the given local time.\r\n */\n\n\nfunction localTimeToNanoOfDay(hour, minute, second, nanosecond) {\n  hour = (0, _integer[\"int\"])(hour);\n  minute = (0, _integer[\"int\"])(minute);\n  second = (0, _integer[\"int\"])(second);\n  nanosecond = (0, _integer[\"int\"])(nanosecond);\n  var totalNanos = hour.multiply(NANOS_PER_HOUR);\n  totalNanos = totalNanos.add(minute.multiply(NANOS_PER_MINUTE));\n  totalNanos = totalNanos.add(second.multiply(NANOS_PER_SECOND));\n  return totalNanos.add(nanosecond);\n}\n/**\r\n * Converts nanoseconds of the day into local time.\r\n * @param {Integer|number|string} nanoOfDay the nanoseconds of the day to convert.\r\n * @return {LocalTime} the local time representing given nanoseconds of the day.\r\n */\n\n\nfunction nanoOfDayToLocalTime(nanoOfDay) {\n  nanoOfDay = (0, _integer[\"int\"])(nanoOfDay);\n  var hour = nanoOfDay.div(NANOS_PER_HOUR);\n  nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));\n  var minute = nanoOfDay.div(NANOS_PER_MINUTE);\n  nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));\n  var second = nanoOfDay.div(NANOS_PER_SECOND);\n  var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));\n  return new _temporalTypes.LocalTime(hour, minute, second, nanosecond);\n}\n/**\r\n * Converts given local date time into a single integer representing this same time in epoch seconds UTC.\r\n * @param {Integer|number|string} year the year of the local date-time to convert.\r\n * @param {Integer|number|string} month the month of the local date-time to convert.\r\n * @param {Integer|number|string} day the day of the local date-time to convert.\r\n * @param {Integer|number|string} hour the hour of the local date-time to convert.\r\n * @param {Integer|number|string} minute the minute of the local date-time to convert.\r\n * @param {Integer|number|string} second the second of the local date-time to convert.\r\n * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.\r\n * @return {Integer} epoch second in UTC representing the given local date time.\r\n */\n\n\nfunction localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {\n  var epochDay = dateToEpochDay(year, month, day);\n  var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);\n  return epochDay.multiply(SECONDS_PER_DAY).add(localTimeSeconds);\n}\n/**\r\n * Converts given epoch second and nanosecond adjustment into a local date time object.\r\n * @param {Integer|number|string} epochSecond the epoch second to use.\r\n * @param {Integer|number|string} nano the nanosecond to use.\r\n * @return {LocalDateTime} the local date time representing given epoch second and nano.\r\n */\n\n\nfunction epochSecondAndNanoToLocalDateTime(epochSecond, nano) {\n  var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);\n  var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);\n  var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);\n  var localDate = epochDayToDate(epochDay);\n  var localTime = nanoOfDayToLocalTime(nanoOfDay);\n  return new _temporalTypes.LocalDateTime(localDate.year, localDate.month, localDate.day, localTime.hour, localTime.minute, localTime.second, localTime.nanosecond);\n}\n/**\r\n * Converts given local date into a single integer representing it's epoch day.\r\n * @param {Integer|number|string} year the year of the local date to convert.\r\n * @param {Integer|number|string} month the month of the local date to convert.\r\n * @param {Integer|number|string} day the day of the local date to convert.\r\n * @return {Integer} epoch day representing the given date.\r\n */\n\n\nfunction dateToEpochDay(year, month, day) {\n  year = (0, _integer[\"int\"])(year);\n  month = (0, _integer[\"int\"])(month);\n  day = (0, _integer[\"int\"])(day);\n  var epochDay = year.multiply(365);\n\n  if (year.greaterThanOrEqual(0)) {\n    epochDay = epochDay.add(year.add(3).div(4).subtract(year.add(99).div(100)).add(year.add(399).div(400)));\n  } else {\n    epochDay = epochDay.subtract(year.div(-4).subtract(year.div(-100)).add(year.div(-400)));\n  }\n\n  epochDay = epochDay.add(month.multiply(367).subtract(362).div(12));\n  epochDay = epochDay.add(day.subtract(1));\n\n  if (month.greaterThan(2)) {\n    epochDay = epochDay.subtract(1);\n\n    if (!isLeapYear(year)) {\n      epochDay = epochDay.subtract(1);\n    }\n  }\n\n  return epochDay.subtract(DAYS_0000_TO_1970);\n}\n/**\r\n * Converts given epoch day to a local date.\r\n * @param {Integer|number|string} epochDay the epoch day to convert.\r\n * @return {Date} the date representing the epoch day in years, months and days.\r\n */\n\n\nfunction epochDayToDate(epochDay) {\n  epochDay = (0, _integer[\"int\"])(epochDay);\n  var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);\n  var adjust = (0, _integer[\"int\"])(0);\n\n  if (zeroDay.lessThan(0)) {\n    var adjustCycles = zeroDay.add(1).div(DAYS_PER_400_YEAR_CYCLE).subtract(1);\n    adjust = adjustCycles.multiply(400);\n    zeroDay = zeroDay.add(adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE));\n  }\n\n  var year = zeroDay.multiply(400).add(591).div(DAYS_PER_400_YEAR_CYCLE);\n  var dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\n\n  if (dayOfYearEst.lessThan(0)) {\n    year = year.subtract(1);\n    dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\n  }\n\n  year = year.add(adjust);\n  var marchDayOfYear = dayOfYearEst;\n  var marchMonth = marchDayOfYear.multiply(5).add(2).div(153);\n  var month = marchMonth.add(2).modulo(12).add(1);\n  var day = marchDayOfYear.subtract(marchMonth.multiply(306).add(5).div(10)).add(1);\n  year = year.add(marchMonth.div(10));\n  return new _temporalTypes.Date(year, month, day);\n}\n/**\r\n * Format given duration to an ISO 8601 string.\r\n * @param {Integer|number|string} months the number of months.\r\n * @param {Integer|number|string} days the number of days.\r\n * @param {Integer|number|string} seconds the number of seconds.\r\n * @param {Integer|number|string} nanoseconds the number of nanoseconds.\r\n * @return {string} ISO string that represents given duration.\r\n */\n\n\nfunction durationToIsoString(months, days, seconds, nanoseconds) {\n  var monthsString = formatNumber(months);\n  var daysString = formatNumber(days);\n  var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);\n  return \"P\".concat(monthsString, \"M\").concat(daysString, \"DT\").concat(secondsAndNanosecondsString, \"S\");\n}\n/**\r\n * Formats given time to an ISO 8601 string.\r\n * @param {Integer|number|string} hour the hour value.\r\n * @param {Integer|number|string} minute the minute value.\r\n * @param {Integer|number|string} second the second value.\r\n * @param {Integer|number|string} nanosecond the nanosecond value.\r\n * @return {string} ISO string that represents given time.\r\n */\n\n\nfunction timeToIsoString(hour, minute, second, nanosecond) {\n  var hourString = formatNumber(hour, 2);\n  var minuteString = formatNumber(minute, 2);\n  var secondString = formatNumber(second, 2);\n  var nanosecondString = formatNanosecond(nanosecond);\n  return \"\".concat(hourString, \":\").concat(minuteString, \":\").concat(secondString).concat(nanosecondString);\n}\n/**\r\n * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.\r\n * @param {Integer|number|string} offsetSeconds the offset in seconds.\r\n * @return {string} ISO string that represents given offset.\r\n */\n\n\nfunction timeZoneOffsetToIsoString(offsetSeconds) {\n  offsetSeconds = (0, _integer[\"int\"])(offsetSeconds);\n\n  if (offsetSeconds.equals(0)) {\n    return 'Z';\n  }\n\n  var isNegative = offsetSeconds.isNegative();\n\n  if (isNegative) {\n    offsetSeconds = offsetSeconds.multiply(-1);\n  }\n\n  var signPrefix = isNegative ? '-' : '+';\n  var hours = formatNumber(offsetSeconds.div(SECONDS_PER_HOUR), 2);\n  var minutes = formatNumber(offsetSeconds.div(SECONDS_PER_MINUTE).modulo(MINUTES_PER_HOUR), 2);\n  var secondsValue = offsetSeconds.modulo(SECONDS_PER_MINUTE);\n  var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);\n  return seconds ? \"\".concat(signPrefix).concat(hours, \":\").concat(minutes, \":\").concat(seconds) : \"\".concat(signPrefix).concat(hours, \":\").concat(minutes);\n}\n/**\r\n * Formats given date to an ISO 8601 string.\r\n * @param {Integer|number|string} year the date year.\r\n * @param {Integer|number|string} month the date month.\r\n * @param {Integer|number|string} day the date day.\r\n * @return {string} ISO string that represents given date.\r\n */\n\n\nfunction dateToIsoString(year, month, day) {\n  year = (0, _integer[\"int\"])(year);\n  var isNegative = year.isNegative();\n\n  if (isNegative) {\n    year = year.multiply(-1);\n  }\n\n  var yearString = formatNumber(year, 4);\n\n  if (isNegative) {\n    yearString = '-' + yearString;\n  }\n\n  var monthString = formatNumber(month, 2);\n  var dayString = formatNumber(day, 2);\n  return \"\".concat(yearString, \"-\").concat(monthString, \"-\").concat(dayString);\n}\n/**\r\n * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.\r\n * @param {global.Date} standardDate the standard JavaScript date.\r\n * @param {Integer|number|undefined} nanoseconds the optional number of nanoseconds.\r\n * @return {Integer|number} the total amount of nanoseconds.\r\n */\n\n\nfunction totalNanoseconds(standardDate, nanoseconds) {\n  nanoseconds = nanoseconds || 0;\n  var nanosFromMillis = standardDate.getMilliseconds() * NANOS_PER_MILLISECOND;\n  return (0, _integer.isInt)(nanoseconds) ? nanoseconds.add(nanosFromMillis) : nanoseconds + nanosFromMillis;\n}\n/**\r\n * Get the time zone offset in seconds from the given standard JavaScript date.\r\n *\r\n * <b>Implementation note:</b>\r\n * Time zone offset returned by the standard JavaScript date is the difference, in minutes, from local time to UTC.\r\n * So positive value means offset is behind UTC and negative value means it is ahead.\r\n * For Neo4j temporal types, like `Time` or `DateTime` offset is in seconds and represents difference from UTC to local time.\r\n * This is different from standard JavaScript dates and that's why implementation negates the returned value.\r\n *\r\n * @param {global.Date} standardDate the standard JavaScript date.\r\n * @return {number} the time zone offset in seconds.\r\n */\n\n\nfunction timeZoneOffsetInSeconds(standardDate) {\n  var offsetInMinutes = standardDate.getTimezoneOffset();\n\n  if (offsetInMinutes === 0) {\n    return 0;\n  }\n\n  return -1 * offsetInMinutes * SECONDS_PER_MINUTE;\n}\n/**\r\n * Assert that the year value is valid.\r\n * @param {Integer|number} year the value to check.\r\n * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidYear(year) {\n  return assertValidTemporalValue(year, YEAR_RANGE, 'Year');\n}\n/**\r\n * Assert that the month value is valid.\r\n * @param {Integer|number} month the value to check.\r\n * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidMonth(month) {\n  return assertValidTemporalValue(month, MONTH_OF_YEAR_RANGE, 'Month');\n}\n/**\r\n * Assert that the day value is valid.\r\n * @param {Integer|number} day the value to check.\r\n * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidDay(day) {\n  return assertValidTemporalValue(day, DAY_OF_MONTH_RANGE, 'Day');\n}\n/**\r\n * Assert that the hour value is valid.\r\n * @param {Integer|number} hour the value to check.\r\n * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidHour(hour) {\n  return assertValidTemporalValue(hour, HOUR_OF_DAY_RANGE, 'Hour');\n}\n/**\r\n * Assert that the minute value is valid.\r\n * @param {Integer|number} minute the value to check.\r\n * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidMinute(minute) {\n  return assertValidTemporalValue(minute, MINUTE_OF_HOUR_RANGE, 'Minute');\n}\n/**\r\n * Assert that the second value is valid.\r\n * @param {Integer|number} second the value to check.\r\n * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidSecond(second) {\n  return assertValidTemporalValue(second, SECOND_OF_MINUTE_RANGE, 'Second');\n}\n/**\r\n * Assert that the nanosecond value is valid.\r\n * @param {Integer|number} nanosecond the value to check.\r\n * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidNanosecond(nanosecond) {\n  return assertValidTemporalValue(nanosecond, NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');\n}\n/**\r\n * Check if the given value is of expected type and is in the expected range.\r\n * @param {Integer|number} value the value to check.\r\n * @param {ValueRange} range the range.\r\n * @param {string} name the name of the value.\r\n * @return {Integer|number} the value if valid. Exception is thrown otherwise.\r\n */\n\n\nfunction assertValidTemporalValue(value, range, name) {\n  (0, _util.assertNumberOrInteger)(value, name);\n\n  if (!range.contains(value)) {\n    throw (0, _error.newError)(\"\".concat(name, \" is expected to be in range \").concat(range, \" but was: \").concat(value));\n  }\n\n  return value;\n}\n/**\r\n * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.\r\n * @param {Integer|number|string} hour the hour of the local time.\r\n * @param {Integer|number|string} minute the minute of the local time.\r\n * @param {Integer|number|string} second the second of the local time.\r\n * @return {Integer} seconds representing the given local time.\r\n */\n\n\nfunction localTimeToSecondOfDay(hour, minute, second) {\n  hour = (0, _integer[\"int\"])(hour);\n  minute = (0, _integer[\"int\"])(minute);\n  second = (0, _integer[\"int\"])(second);\n  var totalSeconds = hour.multiply(SECONDS_PER_HOUR);\n  totalSeconds = totalSeconds.add(minute.multiply(SECONDS_PER_MINUTE));\n  return totalSeconds.add(second);\n}\n/**\r\n * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.\r\n * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.\r\n * @return {boolean} `true` if given year is a leap year, `false` otherwise.\r\n */\n\n\nfunction isLeapYear(year) {\n  year = (0, _integer[\"int\"])(year);\n\n  if (!year.modulo(4).equals(0)) {\n    return false;\n  } else if (!year.modulo(100).equals(0)) {\n    return true;\n  } else if (!year.modulo(400).equals(0)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\r\n * @param {Integer|number|string} x the divident.\r\n * @param {Integer|number|string} y the divisor.\r\n * @return {Integer} the result.\r\n */\n\n\nfunction floorDiv(x, y) {\n  x = (0, _integer[\"int\"])(x);\n  y = (0, _integer[\"int\"])(y);\n  var result = x.div(y);\n\n  if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {\n    result = result.subtract(1);\n  }\n\n  return result;\n}\n/**\r\n * @param {Integer|number|string} x the divident.\r\n * @param {Integer|number|string} y the divisor.\r\n * @return {Integer} the result.\r\n */\n\n\nfunction floorMod(x, y) {\n  x = (0, _integer[\"int\"])(x);\n  y = (0, _integer[\"int\"])(y);\n  return x.subtract(floorDiv(x, y).multiply(y));\n}\n/**\r\n * @param {Integer|number|string} seconds the number of seconds to format.\r\n * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.\r\n * @return {string} formatted value.\r\n */\n\n\nfunction formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {\n  seconds = (0, _integer[\"int\"])(seconds);\n  nanoseconds = (0, _integer[\"int\"])(nanoseconds);\n  var secondsString;\n  var nanosecondsString;\n  var secondsNegative = seconds.isNegative();\n  var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);\n\n  if (secondsNegative && nanosecondsGreaterThanZero) {\n    if (seconds.equals(-1)) {\n      secondsString = '-0';\n    } else {\n      secondsString = seconds.add(1).toString();\n    }\n  } else {\n    secondsString = seconds.toString();\n  }\n\n  if (nanosecondsGreaterThanZero) {\n    if (secondsNegative) {\n      nanosecondsString = formatNanosecond(nanoseconds.negate().add(2 * NANOS_PER_SECOND).modulo(NANOS_PER_SECOND));\n    } else {\n      nanosecondsString = formatNanosecond(nanoseconds.add(NANOS_PER_SECOND).modulo(NANOS_PER_SECOND));\n    }\n  }\n\n  return nanosecondsString ? secondsString + nanosecondsString : secondsString;\n}\n/**\r\n * @param {Integer|number|string} value the number of nanoseconds to format.\r\n * @return {string} formatted and possibly left-padded nanoseconds part as string.\r\n */\n\n\nfunction formatNanosecond(value) {\n  value = (0, _integer[\"int\"])(value);\n  return value.equals(0) ? '' : '.' + formatNumber(value, 9);\n}\n/**\r\n * @param {Integer|number|string} num the number to format.\r\n * @param {number} [stringLength=undefined] the string length to left-pad to.\r\n * @return {string} formatted and possibly left-padded number as string.\r\n */\n\n\nfunction formatNumber(num) {\n  var stringLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  num = (0, _integer[\"int\"])(num);\n  var isNegative = num.isNegative();\n\n  if (isNegative) {\n    num = num.negate();\n  }\n\n  var numString = num.toString();\n\n  if (stringLength) {\n    // left pad the string with zeroes\n    while (numString.length < stringLength) {\n      numString = '0' + numString;\n    }\n  }\n\n  return isNegative ? '-' + numString : numString;\n}","map":{"version":3,"sources":["C:/Users/a1ole/Documents/GitHub/neo4jreact/node_modules/neo4j-driver/lib/internal/temporal-util.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","normalizeSecondsForDuration","normalizeNanosecondsForDuration","localTimeToNanoOfDay","nanoOfDayToLocalTime","localDateTimeToEpochSecond","epochSecondAndNanoToLocalDateTime","dateToEpochDay","epochDayToDate","durationToIsoString","timeToIsoString","timeZoneOffsetToIsoString","dateToIsoString","totalNanoseconds","timeZoneOffsetInSeconds","assertValidYear","assertValidMonth","assertValidDay","assertValidHour","assertValidMinute","assertValidSecond","assertValidNanosecond","_classCallCheck2","_createClass2","_integer","_temporalTypes","_util","_error","ValueRange","min","max","_minNumber","_maxNumber","_minInteger","_maxInteger","key","contains","isInt","greaterThanOrEqual","lessThanOrEqual","toString","concat","YEAR_RANGE","MONTH_OF_YEAR_RANGE","DAY_OF_MONTH_RANGE","HOUR_OF_DAY_RANGE","MINUTE_OF_HOUR_RANGE","SECOND_OF_MINUTE_RANGE","NANOSECOND_OF_SECOND_RANGE","MINUTES_PER_HOUR","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","NANOS_PER_SECOND","NANOS_PER_MILLISECOND","NANOS_PER_MINUTE","NANOS_PER_HOUR","DAYS_0000_TO_1970","DAYS_PER_400_YEAR_CYCLE","SECONDS_PER_DAY","seconds","nanoseconds","add","floorDiv","floorMod","hour","minute","second","nanosecond","totalNanos","multiply","nanoOfDay","div","subtract","LocalTime","year","month","day","epochDay","localTimeSeconds","localTimeToSecondOfDay","epochSecond","nano","secondsOfDay","localDate","localTime","LocalDateTime","greaterThan","isLeapYear","zeroDay","adjust","lessThan","adjustCycles","dayOfYearEst","marchDayOfYear","marchMonth","modulo","Date","months","days","monthsString","formatNumber","daysString","secondsAndNanosecondsString","formatSecondsAndNanosecondsForDuration","hourString","minuteString","secondString","nanosecondString","formatNanosecond","offsetSeconds","equals","isNegative","signPrefix","hours","minutes","secondsValue","yearString","monthString","dayString","standardDate","nanosFromMillis","getMilliseconds","offsetInMinutes","getTimezoneOffset","assertValidTemporalValue","range","name","assertNumberOrInteger","newError","totalSeconds","x","y","result","isPositive","notEquals","secondsString","nanosecondsString","secondsNegative","nanosecondsGreaterThanZero","negate","num","stringLength","arguments","length","undefined","numString"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.normalizeSecondsForDuration = normalizeSecondsForDuration;\r\nexports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;\r\nexports.localTimeToNanoOfDay = localTimeToNanoOfDay;\r\nexports.nanoOfDayToLocalTime = nanoOfDayToLocalTime;\r\nexports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;\r\nexports.epochSecondAndNanoToLocalDateTime = epochSecondAndNanoToLocalDateTime;\r\nexports.dateToEpochDay = dateToEpochDay;\r\nexports.epochDayToDate = epochDayToDate;\r\nexports.durationToIsoString = durationToIsoString;\r\nexports.timeToIsoString = timeToIsoString;\r\nexports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;\r\nexports.dateToIsoString = dateToIsoString;\r\nexports.totalNanoseconds = totalNanoseconds;\r\nexports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;\r\nexports.assertValidYear = assertValidYear;\r\nexports.assertValidMonth = assertValidMonth;\r\nexports.assertValidDay = assertValidDay;\r\nexports.assertValidHour = assertValidHour;\r\nexports.assertValidMinute = assertValidMinute;\r\nexports.assertValidSecond = assertValidSecond;\r\nexports.assertValidNanosecond = assertValidNanosecond;\r\n\r\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\r\n\r\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\r\n\r\nvar _integer = require(\"../integer\");\r\n\r\nvar _temporalTypes = require(\"../temporal-types\");\r\n\r\nvar _util = require(\"./util\");\r\n\r\nvar _error = require(\"../error\");\r\n\r\n/**\r\n * Copyright (c) 2002-2020 \"Neo4j,\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.\r\n\r\n  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived\r\n  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere\r\n  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.\r\n\r\n  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the\r\n  conversion functions.\r\n */\r\nvar ValueRange =\r\n/*#__PURE__*/\r\nfunction () {\r\n  function ValueRange(min, max) {\r\n    (0, _classCallCheck2[\"default\"])(this, ValueRange);\r\n    this._minNumber = min;\r\n    this._maxNumber = max;\r\n    this._minInteger = (0, _integer[\"int\"])(min);\r\n    this._maxInteger = (0, _integer[\"int\"])(max);\r\n  }\r\n\r\n  (0, _createClass2[\"default\"])(ValueRange, [{\r\n    key: \"contains\",\r\n    value: function contains(value) {\r\n      if ((0, _integer.isInt)(value)) {\r\n        return value.greaterThanOrEqual(this._minInteger) && value.lessThanOrEqual(this._maxInteger);\r\n      } else {\r\n        return value >= this._minNumber && value <= this._maxNumber;\r\n      }\r\n    }\r\n  }, {\r\n    key: \"toString\",\r\n    value: function toString() {\r\n      return \"[\".concat(this._minNumber, \", \").concat(this._maxNumber, \"]\");\r\n    }\r\n  }]);\r\n  return ValueRange;\r\n}();\r\n\r\nvar YEAR_RANGE = new ValueRange(-999999999, 999999999);\r\nvar MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);\r\nvar DAY_OF_MONTH_RANGE = new ValueRange(1, 31);\r\nvar HOUR_OF_DAY_RANGE = new ValueRange(0, 23);\r\nvar MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);\r\nvar SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);\r\nvar NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);\r\nvar MINUTES_PER_HOUR = 60;\r\nvar SECONDS_PER_MINUTE = 60;\r\nvar SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;\r\nvar NANOS_PER_SECOND = 1000000000;\r\nvar NANOS_PER_MILLISECOND = 1000000;\r\nvar NANOS_PER_MINUTE = NANOS_PER_SECOND * SECONDS_PER_MINUTE;\r\nvar NANOS_PER_HOUR = NANOS_PER_MINUTE * MINUTES_PER_HOUR;\r\nvar DAYS_0000_TO_1970 = 719528;\r\nvar DAYS_PER_400_YEAR_CYCLE = 146097;\r\nvar SECONDS_PER_DAY = 86400;\r\n\r\nfunction normalizeSecondsForDuration(seconds, nanoseconds) {\r\n  return (0, _integer[\"int\"])(seconds).add(floorDiv(nanoseconds, NANOS_PER_SECOND));\r\n}\r\n\r\nfunction normalizeNanosecondsForDuration(nanoseconds) {\r\n  return floorMod(nanoseconds, NANOS_PER_SECOND);\r\n}\r\n/**\r\n * Converts given local time into a single integer representing this same time in nanoseconds of the day.\r\n * @param {Integer|number|string} hour the hour of the local time to convert.\r\n * @param {Integer|number|string} minute the minute of the local time to convert.\r\n * @param {Integer|number|string} second the second of the local time to convert.\r\n * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.\r\n * @return {Integer} nanoseconds representing the given local time.\r\n */\r\n\r\n\r\nfunction localTimeToNanoOfDay(hour, minute, second, nanosecond) {\r\n  hour = (0, _integer[\"int\"])(hour);\r\n  minute = (0, _integer[\"int\"])(minute);\r\n  second = (0, _integer[\"int\"])(second);\r\n  nanosecond = (0, _integer[\"int\"])(nanosecond);\r\n  var totalNanos = hour.multiply(NANOS_PER_HOUR);\r\n  totalNanos = totalNanos.add(minute.multiply(NANOS_PER_MINUTE));\r\n  totalNanos = totalNanos.add(second.multiply(NANOS_PER_SECOND));\r\n  return totalNanos.add(nanosecond);\r\n}\r\n/**\r\n * Converts nanoseconds of the day into local time.\r\n * @param {Integer|number|string} nanoOfDay the nanoseconds of the day to convert.\r\n * @return {LocalTime} the local time representing given nanoseconds of the day.\r\n */\r\n\r\n\r\nfunction nanoOfDayToLocalTime(nanoOfDay) {\r\n  nanoOfDay = (0, _integer[\"int\"])(nanoOfDay);\r\n  var hour = nanoOfDay.div(NANOS_PER_HOUR);\r\n  nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));\r\n  var minute = nanoOfDay.div(NANOS_PER_MINUTE);\r\n  nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));\r\n  var second = nanoOfDay.div(NANOS_PER_SECOND);\r\n  var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));\r\n  return new _temporalTypes.LocalTime(hour, minute, second, nanosecond);\r\n}\r\n/**\r\n * Converts given local date time into a single integer representing this same time in epoch seconds UTC.\r\n * @param {Integer|number|string} year the year of the local date-time to convert.\r\n * @param {Integer|number|string} month the month of the local date-time to convert.\r\n * @param {Integer|number|string} day the day of the local date-time to convert.\r\n * @param {Integer|number|string} hour the hour of the local date-time to convert.\r\n * @param {Integer|number|string} minute the minute of the local date-time to convert.\r\n * @param {Integer|number|string} second the second of the local date-time to convert.\r\n * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.\r\n * @return {Integer} epoch second in UTC representing the given local date time.\r\n */\r\n\r\n\r\nfunction localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {\r\n  var epochDay = dateToEpochDay(year, month, day);\r\n  var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);\r\n  return epochDay.multiply(SECONDS_PER_DAY).add(localTimeSeconds);\r\n}\r\n/**\r\n * Converts given epoch second and nanosecond adjustment into a local date time object.\r\n * @param {Integer|number|string} epochSecond the epoch second to use.\r\n * @param {Integer|number|string} nano the nanosecond to use.\r\n * @return {LocalDateTime} the local date time representing given epoch second and nano.\r\n */\r\n\r\n\r\nfunction epochSecondAndNanoToLocalDateTime(epochSecond, nano) {\r\n  var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);\r\n  var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);\r\n  var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);\r\n  var localDate = epochDayToDate(epochDay);\r\n  var localTime = nanoOfDayToLocalTime(nanoOfDay);\r\n  return new _temporalTypes.LocalDateTime(localDate.year, localDate.month, localDate.day, localTime.hour, localTime.minute, localTime.second, localTime.nanosecond);\r\n}\r\n/**\r\n * Converts given local date into a single integer representing it's epoch day.\r\n * @param {Integer|number|string} year the year of the local date to convert.\r\n * @param {Integer|number|string} month the month of the local date to convert.\r\n * @param {Integer|number|string} day the day of the local date to convert.\r\n * @return {Integer} epoch day representing the given date.\r\n */\r\n\r\n\r\nfunction dateToEpochDay(year, month, day) {\r\n  year = (0, _integer[\"int\"])(year);\r\n  month = (0, _integer[\"int\"])(month);\r\n  day = (0, _integer[\"int\"])(day);\r\n  var epochDay = year.multiply(365);\r\n\r\n  if (year.greaterThanOrEqual(0)) {\r\n    epochDay = epochDay.add(year.add(3).div(4).subtract(year.add(99).div(100)).add(year.add(399).div(400)));\r\n  } else {\r\n    epochDay = epochDay.subtract(year.div(-4).subtract(year.div(-100)).add(year.div(-400)));\r\n  }\r\n\r\n  epochDay = epochDay.add(month.multiply(367).subtract(362).div(12));\r\n  epochDay = epochDay.add(day.subtract(1));\r\n\r\n  if (month.greaterThan(2)) {\r\n    epochDay = epochDay.subtract(1);\r\n\r\n    if (!isLeapYear(year)) {\r\n      epochDay = epochDay.subtract(1);\r\n    }\r\n  }\r\n\r\n  return epochDay.subtract(DAYS_0000_TO_1970);\r\n}\r\n/**\r\n * Converts given epoch day to a local date.\r\n * @param {Integer|number|string} epochDay the epoch day to convert.\r\n * @return {Date} the date representing the epoch day in years, months and days.\r\n */\r\n\r\n\r\nfunction epochDayToDate(epochDay) {\r\n  epochDay = (0, _integer[\"int\"])(epochDay);\r\n  var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);\r\n  var adjust = (0, _integer[\"int\"])(0);\r\n\r\n  if (zeroDay.lessThan(0)) {\r\n    var adjustCycles = zeroDay.add(1).div(DAYS_PER_400_YEAR_CYCLE).subtract(1);\r\n    adjust = adjustCycles.multiply(400);\r\n    zeroDay = zeroDay.add(adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE));\r\n  }\r\n\r\n  var year = zeroDay.multiply(400).add(591).div(DAYS_PER_400_YEAR_CYCLE);\r\n  var dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\r\n\r\n  if (dayOfYearEst.lessThan(0)) {\r\n    year = year.subtract(1);\r\n    dayOfYearEst = zeroDay.subtract(year.multiply(365).add(year.div(4)).subtract(year.div(100)).add(year.div(400)));\r\n  }\r\n\r\n  year = year.add(adjust);\r\n  var marchDayOfYear = dayOfYearEst;\r\n  var marchMonth = marchDayOfYear.multiply(5).add(2).div(153);\r\n  var month = marchMonth.add(2).modulo(12).add(1);\r\n  var day = marchDayOfYear.subtract(marchMonth.multiply(306).add(5).div(10)).add(1);\r\n  year = year.add(marchMonth.div(10));\r\n  return new _temporalTypes.Date(year, month, day);\r\n}\r\n/**\r\n * Format given duration to an ISO 8601 string.\r\n * @param {Integer|number|string} months the number of months.\r\n * @param {Integer|number|string} days the number of days.\r\n * @param {Integer|number|string} seconds the number of seconds.\r\n * @param {Integer|number|string} nanoseconds the number of nanoseconds.\r\n * @return {string} ISO string that represents given duration.\r\n */\r\n\r\n\r\nfunction durationToIsoString(months, days, seconds, nanoseconds) {\r\n  var monthsString = formatNumber(months);\r\n  var daysString = formatNumber(days);\r\n  var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);\r\n  return \"P\".concat(monthsString, \"M\").concat(daysString, \"DT\").concat(secondsAndNanosecondsString, \"S\");\r\n}\r\n/**\r\n * Formats given time to an ISO 8601 string.\r\n * @param {Integer|number|string} hour the hour value.\r\n * @param {Integer|number|string} minute the minute value.\r\n * @param {Integer|number|string} second the second value.\r\n * @param {Integer|number|string} nanosecond the nanosecond value.\r\n * @return {string} ISO string that represents given time.\r\n */\r\n\r\n\r\nfunction timeToIsoString(hour, minute, second, nanosecond) {\r\n  var hourString = formatNumber(hour, 2);\r\n  var minuteString = formatNumber(minute, 2);\r\n  var secondString = formatNumber(second, 2);\r\n  var nanosecondString = formatNanosecond(nanosecond);\r\n  return \"\".concat(hourString, \":\").concat(minuteString, \":\").concat(secondString).concat(nanosecondString);\r\n}\r\n/**\r\n * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.\r\n * @param {Integer|number|string} offsetSeconds the offset in seconds.\r\n * @return {string} ISO string that represents given offset.\r\n */\r\n\r\n\r\nfunction timeZoneOffsetToIsoString(offsetSeconds) {\r\n  offsetSeconds = (0, _integer[\"int\"])(offsetSeconds);\r\n\r\n  if (offsetSeconds.equals(0)) {\r\n    return 'Z';\r\n  }\r\n\r\n  var isNegative = offsetSeconds.isNegative();\r\n\r\n  if (isNegative) {\r\n    offsetSeconds = offsetSeconds.multiply(-1);\r\n  }\r\n\r\n  var signPrefix = isNegative ? '-' : '+';\r\n  var hours = formatNumber(offsetSeconds.div(SECONDS_PER_HOUR), 2);\r\n  var minutes = formatNumber(offsetSeconds.div(SECONDS_PER_MINUTE).modulo(MINUTES_PER_HOUR), 2);\r\n  var secondsValue = offsetSeconds.modulo(SECONDS_PER_MINUTE);\r\n  var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);\r\n  return seconds ? \"\".concat(signPrefix).concat(hours, \":\").concat(minutes, \":\").concat(seconds) : \"\".concat(signPrefix).concat(hours, \":\").concat(minutes);\r\n}\r\n/**\r\n * Formats given date to an ISO 8601 string.\r\n * @param {Integer|number|string} year the date year.\r\n * @param {Integer|number|string} month the date month.\r\n * @param {Integer|number|string} day the date day.\r\n * @return {string} ISO string that represents given date.\r\n */\r\n\r\n\r\nfunction dateToIsoString(year, month, day) {\r\n  year = (0, _integer[\"int\"])(year);\r\n  var isNegative = year.isNegative();\r\n\r\n  if (isNegative) {\r\n    year = year.multiply(-1);\r\n  }\r\n\r\n  var yearString = formatNumber(year, 4);\r\n\r\n  if (isNegative) {\r\n    yearString = '-' + yearString;\r\n  }\r\n\r\n  var monthString = formatNumber(month, 2);\r\n  var dayString = formatNumber(day, 2);\r\n  return \"\".concat(yearString, \"-\").concat(monthString, \"-\").concat(dayString);\r\n}\r\n/**\r\n * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.\r\n * @param {global.Date} standardDate the standard JavaScript date.\r\n * @param {Integer|number|undefined} nanoseconds the optional number of nanoseconds.\r\n * @return {Integer|number} the total amount of nanoseconds.\r\n */\r\n\r\n\r\nfunction totalNanoseconds(standardDate, nanoseconds) {\r\n  nanoseconds = nanoseconds || 0;\r\n  var nanosFromMillis = standardDate.getMilliseconds() * NANOS_PER_MILLISECOND;\r\n  return (0, _integer.isInt)(nanoseconds) ? nanoseconds.add(nanosFromMillis) : nanoseconds + nanosFromMillis;\r\n}\r\n/**\r\n * Get the time zone offset in seconds from the given standard JavaScript date.\r\n *\r\n * <b>Implementation note:</b>\r\n * Time zone offset returned by the standard JavaScript date is the difference, in minutes, from local time to UTC.\r\n * So positive value means offset is behind UTC and negative value means it is ahead.\r\n * For Neo4j temporal types, like `Time` or `DateTime` offset is in seconds and represents difference from UTC to local time.\r\n * This is different from standard JavaScript dates and that's why implementation negates the returned value.\r\n *\r\n * @param {global.Date} standardDate the standard JavaScript date.\r\n * @return {number} the time zone offset in seconds.\r\n */\r\n\r\n\r\nfunction timeZoneOffsetInSeconds(standardDate) {\r\n  var offsetInMinutes = standardDate.getTimezoneOffset();\r\n\r\n  if (offsetInMinutes === 0) {\r\n    return 0;\r\n  }\r\n\r\n  return -1 * offsetInMinutes * SECONDS_PER_MINUTE;\r\n}\r\n/**\r\n * Assert that the year value is valid.\r\n * @param {Integer|number} year the value to check.\r\n * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidYear(year) {\r\n  return assertValidTemporalValue(year, YEAR_RANGE, 'Year');\r\n}\r\n/**\r\n * Assert that the month value is valid.\r\n * @param {Integer|number} month the value to check.\r\n * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidMonth(month) {\r\n  return assertValidTemporalValue(month, MONTH_OF_YEAR_RANGE, 'Month');\r\n}\r\n/**\r\n * Assert that the day value is valid.\r\n * @param {Integer|number} day the value to check.\r\n * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidDay(day) {\r\n  return assertValidTemporalValue(day, DAY_OF_MONTH_RANGE, 'Day');\r\n}\r\n/**\r\n * Assert that the hour value is valid.\r\n * @param {Integer|number} hour the value to check.\r\n * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidHour(hour) {\r\n  return assertValidTemporalValue(hour, HOUR_OF_DAY_RANGE, 'Hour');\r\n}\r\n/**\r\n * Assert that the minute value is valid.\r\n * @param {Integer|number} minute the value to check.\r\n * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidMinute(minute) {\r\n  return assertValidTemporalValue(minute, MINUTE_OF_HOUR_RANGE, 'Minute');\r\n}\r\n/**\r\n * Assert that the second value is valid.\r\n * @param {Integer|number} second the value to check.\r\n * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidSecond(second) {\r\n  return assertValidTemporalValue(second, SECOND_OF_MINUTE_RANGE, 'Second');\r\n}\r\n/**\r\n * Assert that the nanosecond value is valid.\r\n * @param {Integer|number} nanosecond the value to check.\r\n * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidNanosecond(nanosecond) {\r\n  return assertValidTemporalValue(nanosecond, NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');\r\n}\r\n/**\r\n * Check if the given value is of expected type and is in the expected range.\r\n * @param {Integer|number} value the value to check.\r\n * @param {ValueRange} range the range.\r\n * @param {string} name the name of the value.\r\n * @return {Integer|number} the value if valid. Exception is thrown otherwise.\r\n */\r\n\r\n\r\nfunction assertValidTemporalValue(value, range, name) {\r\n  (0, _util.assertNumberOrInteger)(value, name);\r\n\r\n  if (!range.contains(value)) {\r\n    throw (0, _error.newError)(\"\".concat(name, \" is expected to be in range \").concat(range, \" but was: \").concat(value));\r\n  }\r\n\r\n  return value;\r\n}\r\n/**\r\n * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.\r\n * @param {Integer|number|string} hour the hour of the local time.\r\n * @param {Integer|number|string} minute the minute of the local time.\r\n * @param {Integer|number|string} second the second of the local time.\r\n * @return {Integer} seconds representing the given local time.\r\n */\r\n\r\n\r\nfunction localTimeToSecondOfDay(hour, minute, second) {\r\n  hour = (0, _integer[\"int\"])(hour);\r\n  minute = (0, _integer[\"int\"])(minute);\r\n  second = (0, _integer[\"int\"])(second);\r\n  var totalSeconds = hour.multiply(SECONDS_PER_HOUR);\r\n  totalSeconds = totalSeconds.add(minute.multiply(SECONDS_PER_MINUTE));\r\n  return totalSeconds.add(second);\r\n}\r\n/**\r\n * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.\r\n * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.\r\n * @return {boolean} `true` if given year is a leap year, `false` otherwise.\r\n */\r\n\r\n\r\nfunction isLeapYear(year) {\r\n  year = (0, _integer[\"int\"])(year);\r\n\r\n  if (!year.modulo(4).equals(0)) {\r\n    return false;\r\n  } else if (!year.modulo(100).equals(0)) {\r\n    return true;\r\n  } else if (!year.modulo(400).equals(0)) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @param {Integer|number|string} x the divident.\r\n * @param {Integer|number|string} y the divisor.\r\n * @return {Integer} the result.\r\n */\r\n\r\n\r\nfunction floorDiv(x, y) {\r\n  x = (0, _integer[\"int\"])(x);\r\n  y = (0, _integer[\"int\"])(y);\r\n  var result = x.div(y);\r\n\r\n  if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {\r\n    result = result.subtract(1);\r\n  }\r\n\r\n  return result;\r\n}\r\n/**\r\n * @param {Integer|number|string} x the divident.\r\n * @param {Integer|number|string} y the divisor.\r\n * @return {Integer} the result.\r\n */\r\n\r\n\r\nfunction floorMod(x, y) {\r\n  x = (0, _integer[\"int\"])(x);\r\n  y = (0, _integer[\"int\"])(y);\r\n  return x.subtract(floorDiv(x, y).multiply(y));\r\n}\r\n/**\r\n * @param {Integer|number|string} seconds the number of seconds to format.\r\n * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.\r\n * @return {string} formatted value.\r\n */\r\n\r\n\r\nfunction formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {\r\n  seconds = (0, _integer[\"int\"])(seconds);\r\n  nanoseconds = (0, _integer[\"int\"])(nanoseconds);\r\n  var secondsString;\r\n  var nanosecondsString;\r\n  var secondsNegative = seconds.isNegative();\r\n  var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);\r\n\r\n  if (secondsNegative && nanosecondsGreaterThanZero) {\r\n    if (seconds.equals(-1)) {\r\n      secondsString = '-0';\r\n    } else {\r\n      secondsString = seconds.add(1).toString();\r\n    }\r\n  } else {\r\n    secondsString = seconds.toString();\r\n  }\r\n\r\n  if (nanosecondsGreaterThanZero) {\r\n    if (secondsNegative) {\r\n      nanosecondsString = formatNanosecond(nanoseconds.negate().add(2 * NANOS_PER_SECOND).modulo(NANOS_PER_SECOND));\r\n    } else {\r\n      nanosecondsString = formatNanosecond(nanoseconds.add(NANOS_PER_SECOND).modulo(NANOS_PER_SECOND));\r\n    }\r\n  }\r\n\r\n  return nanosecondsString ? secondsString + nanosecondsString : secondsString;\r\n}\r\n/**\r\n * @param {Integer|number|string} value the number of nanoseconds to format.\r\n * @return {string} formatted and possibly left-padded nanoseconds part as string.\r\n */\r\n\r\n\r\nfunction formatNanosecond(value) {\r\n  value = (0, _integer[\"int\"])(value);\r\n  return value.equals(0) ? '' : '.' + formatNumber(value, 9);\r\n}\r\n/**\r\n * @param {Integer|number|string} num the number to format.\r\n * @param {number} [stringLength=undefined] the string length to left-pad to.\r\n * @return {string} formatted and possibly left-padded number as string.\r\n */\r\n\r\n\r\nfunction formatNumber(num) {\r\n  var stringLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\r\n  num = (0, _integer[\"int\"])(num);\r\n  var isNegative = num.isNegative();\r\n\r\n  if (isNegative) {\r\n    num = num.negate();\r\n  }\r\n\r\n  var numString = num.toString();\r\n\r\n  if (stringLength) {\r\n    // left pad the string with zeroes\r\n    while (numString.length < stringLength) {\r\n      numString = '0' + numString;\r\n    }\r\n  }\r\n\r\n  return isNegative ? '-' + numString : numString;\r\n}"]},"metadata":{},"sourceType":"script"}